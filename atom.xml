<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>辣鸡熊个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://eeeje.com/"/>
  <updated>2019-11-24T19:03:17.882Z</updated>
  <id>https://eeeje.com/</id>
  
  <author>
    <name>辣鸡熊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows安装建议</title>
    <link href="https://eeeje.com/2019/11/25/windows/"/>
    <id>https://eeeje.com/2019/11/25/windows/</id>
    <published>2019-11-24T17:44:10.000Z</published>
    <updated>2019-11-24T19:03:17.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows安装建议"><a href="#Windows安装建议" class="headerlink" title="Windows安装建议"></a>Windows安装建议</h1><p><em>一周没有学习的我</em></p><p>因为最近抽出来时间把自己的电脑重装了下，顺便在U盘上做了一个windows to go的系统</p><p>记录一下windows的一些心得</p><p>我目前用的是官方的最新版专业版，挺顺手的，感觉win 10 的更新有点向着Android的特征发展，我的专业版是之前洗白的，直接关联到账号的</p><h2 id="1-版本的选择"><a href="#1-版本的选择" class="headerlink" title="1.版本的选择"></a>1.版本的选择</h2><ul><li>首先还是看机器配置，一些内存比较大的电脑或者自己日常用的，我还是很建议去用原版的系统，微软对win10的支持还是蛮不错的</li></ul><p>链接： <a href="https://www.microsoft.com/zh-cn/software-download/windows10" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/software-download/windows10</a> </p><p>先下载官方的工具，制作ISO就好了，很简单，关于U盘做系统，百度搜一搜很多教程，个人推荐<a href="http://www.wepe.com.cn/" target="_blank" rel="noopener">微PE</a>，无软件植入。</p><p>提供两款激活工具：<a href="https://oss.sadly.pw/file/HWIDGEN.rar" target="_blank" rel="noopener">HWIDGEN</a>  、 <a href="https://oss.sadly.pw/file/HWIDGen_CN.exe" target="_blank" rel="noopener">HWIDGen_CN</a> </p><p>两个其实是同一个软件，前一个是命令行，可以选择需要激活的版本，第二个是傻瓜式操作，只有两个按钮，数字激活和退出。</p><ul><li>如果你的机器内存很小，那我就比较建议去装一个比较小的系统了，比如说windows企业版 LTSB 少了很多插件，但是，一般需要密钥下载，所以就是接着的</li></ul><h2 id="2-镜像的选择-amp-使用"><a href="#2-镜像的选择-amp-使用" class="headerlink" title="2.镜像的选择&amp;使用"></a>2.镜像的选择&amp;使用</h2><p>现在网上的各种镜像，系统之家啊那些的，让人眼花缭乱，大部分人都是随便选择一个去用，运气好，可以用，就拿着用了，不行的话，就换一个，其实这样是很危险的，轻者让你饱受主页绑定的烦恼，重者成为别人的肉鸡。</p><p>关于精简系统的推荐，我只推荐一个作者的，来自俄罗斯大神lopatkin的精简版， Lopatkin制作的中文版镜像比较流行的有三个版本——PIP,LIM,BOX。我选择了PIP版本进行整理，因为这个版本在组件的精简和保留的平衡上做的很好，最适合安装使用。其中所有的镜像均在Windows企业版基础之上精简</p><p>链接：<a href="https://pan.baidu.com/s/15j4PLefr8Y9ojqG7d7fuSg" target="_blank" rel="noopener">百度网盘</a> 提取码：gla9</p><p>Windows精简版系统安装注意事项</p><p>1.安装完成后首次进入系统，桌面会有一个“Restart.bat”的文件，请使用管理员模式运行该文件，运行期间会让你选择是否精简掉Cortana，建议选择是(也就是输入y并回车)随后系统会自动重启。<br>2.安装完毕之后请关闭系统更新（方法：win+r运行“services.msc”找到“Windows update”，右键属性，启动类型更改为“禁用”，应用设置即可）<br>3.如果你发现一些视频网站(如：优酷等)的视频无法正常播放，请进入C盘中的“Windows\System32\drivers\etc”目录下，将文件hosts删除。<br>4.常见的系统功能及组件被精简的有：Windows Defender,Windows Edge,Cortana,应用商店,以及默认的照片查看与视频播放工具。推荐使用<a href="http://www.bandisoft.com/honeyview/dl.php?web" target="_blank" rel="noopener">honeyview</a>作为默认照片查看工具，<a href="http://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="noopener">Potplayer</a>作为默认视频播放工具。</p><p>OneDrive如何恢复？</p><p>俄罗斯大神精简OneDrive用的方法是在注册表里添加了一个“DisableFileSyncNGSC”，所以我们删除这个键值即可。</p><p>按下win+r调出运行，输入“regedit”，在注册表中依次选择<br>“HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\OneDrive”</p><p>在右侧窗口右键选择“DisableFileSyncNGSC”并删除。</p><p>最后重新打开OneDrive或者重装OneDrive即可。</p><h2 id="运行库的完善"><a href="#运行库的完善" class="headerlink" title="运行库的完善"></a>运行库的完善</h2><p>精简版系统用来玩游戏会有一些运行库缺失，最简单的办法，就是安装一次QQ（因为qq会在后台给你安装相当一部分的运行库）</p><p>如果不安QQ的话，就可以使用安装器安装：<a href="https://oss.sadly.pw/file/%E5%BE%AE%E8%BD%AF%E5%B8%B8%E7%94%A8%E8%BF%90%E8%A1%8C%E5%BA%9332%E4%BD%8D.exe" target="_blank" rel="noopener">32位</a>      <a href="https://oss.sadly.pw/file/%E5%BE%AE%E8%BD%AF%E5%B8%B8%E7%94%A8%E8%BF%90%E8%A1%8C%E5%BA%9364%E4%BD%8D.exe" target="_blank" rel="noopener">64位</a></p><p>另外，对一些国外游戏的支持的运行库，可以自行搜索：3DM游戏运行库合集安装包v3.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Windows安装建议&quot;&gt;&lt;a href=&quot;#Windows安装建议&quot; class=&quot;headerlink&quot; title=&quot;Windows安装建议&quot;&gt;&lt;/a&gt;Windows安装建议&lt;/h1&gt;&lt;p&gt;&lt;em&gt;一周没有学习的我&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;因为最近抽出来时间
      
    
    </summary>
    
    
      <category term="运维" scheme="https://eeeje.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="windows" scheme="https://eeeje.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>ICMP</title>
    <link href="https://eeeje.com/2019/11/18/ICMP/"/>
    <id>https://eeeje.com/2019/11/18/ICMP/</id>
    <published>2019-11-17T17:44:10.000Z</published>
    <updated>2019-11-24T18:13:10.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h1><p><em>英特网控制消息协议</em></p><p>在网络设备间传递各种差错和控制信息  </p><blockquote><p>甲：你听到了吗？（ICMP Echo Request）</p><p>乙：听到了！（ICMP Echo Reply）</p></blockquote><p><img src="https://oss.sadly.pw/images/R-S/20191118/image-20191118104258247.png" alt=""></p><p>ICMP中最重要的是类型（type）与代码（code）</p><table><thead><tr><th>类型</th><th>编码</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>Echo Reply</td></tr><tr><td>3</td><td>0</td><td>网络不可达</td></tr><tr><td>3</td><td>1</td><td>主机不可达</td></tr><tr><td>3</td><td>2</td><td>协议不可达</td></tr><tr><td>3</td><td>3</td><td>端口不可达</td></tr><tr><td>5</td><td>0</td><td>重定向</td></tr><tr><td>8</td><td>0</td><td>Echo Request</td></tr></tbody></table><h3 id="ping的用法"><a href="#ping的用法" class="headerlink" title="ping的用法"></a>ping的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">用法: ping [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS]</span><br><span class="line">            [-r count] [-s count] [[-j host-list] | [-k host-list]]</span><br><span class="line">            [-w timeout] [-R] [-S srcaddr] [-c compartment] [-p]</span><br><span class="line">            [-4] [-6] target_name</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line">    -t             Ping 指定的主机，直到停止。</span><br><span class="line">                   若要查看统计信息并继续操作，请键入 Ctrl+Break；</span><br><span class="line">                   若要停止，请键入 Ctrl+C。</span><br><span class="line">    -a             将地址解析为主机名。</span><br><span class="line">    -n count       要发送的回显请求数。</span><br><span class="line">    -l size        发送缓冲区大小。</span><br><span class="line">    -f             在数据包中设置“不分段”标记(仅适用于 IPv4)。</span><br><span class="line">    -i TTL         生存时间。</span><br><span class="line">    -v TOS         服务类型(仅适用于 IPv4。该设置已被弃用，</span><br><span class="line">                   对 IP 标头中的服务类型字段没有任何</span><br><span class="line">                   影响)。</span><br><span class="line">    -r count       记录计数跃点的路由(仅适用于 IPv4)。</span><br><span class="line">    -s count       计数跃点的时间戳(仅适用于 IPv4)。</span><br><span class="line">    -j host-list   与主机列表一起使用的松散源路由(仅适用于 IPv4)。</span><br><span class="line">    -k host-list    与主机列表一起使用的严格源路由(仅适用于 IPv4)。</span><br><span class="line">    -w timeout     等待每次回复的超时时间(毫秒)。</span><br><span class="line">    -R             同样使用路由标头测试反向路由(仅适用于 IPv6)。</span><br><span class="line">                   根据 RFC 5095，已弃用此路由标头。</span><br><span class="line">                   如果使用此标头，某些系统可能丢弃</span><br><span class="line">                   回显请求。</span><br><span class="line">    -S srcaddr     要使用的源地址。</span><br><span class="line">    -c compartment 路由隔离舱标识符。</span><br><span class="line">    -p             Ping Hyper-V 网络虚拟化提供程序地址。</span><br><span class="line">    -4             强制使用 IPv4。</span><br><span class="line">    -6             强制使用 IPv6。</span><br></pre></td></tr></table></figure><h2 id="PING的错误类型"><a href="#PING的错误类型" class="headerlink" title="PING的错误类型"></a>PING的错误类型</h2><h3 id="正常状态（ping路由器上的网关）"><a href="#正常状态（ping路由器上的网关）" class="headerlink" title="正常状态（ping路由器上的网关）"></a>正常状态（ping路由器上的网关）</h3><p>发送数据并受到回复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[C:\~]$ ping 192.168.123.1</span><br><span class="line"></span><br><span class="line">正在 Ping 192.168.123.1 具有 32 字节的数据:</span><br><span class="line">来自 192.168.123.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.123.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.123.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line">来自 192.168.123.1 的回复: 字节=32 时间&lt;1ms TTL=64</span><br><span class="line"></span><br><span class="line">192.168.123.1 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 0ms，最长 = 0ms，平均 = 0ms</span><br></pre></td></tr></table></figure><h3 id="不可达-无法访问目标主机（ping一个不存在的地址）"><a href="#不可达-无法访问目标主机（ping一个不存在的地址）" class="headerlink" title="不可达/无法访问目标主机（ping一个不存在的地址）"></a>不可达/无法访问目标主机（ping一个不存在的地址）</h3><p>网关没有路由、找不到这个地址的mac地址，发不过去数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ping 192.168.123.55</span><br><span class="line">PING 192.168.123.55 (192.168.123.55) 56(84) bytes of data.</span><br><span class="line">From 192.168.123.100 icmp_seq=1 Destination Host Unreachable</span><br><span class="line">From 192.168.123.100 icmp_seq=2 Destination Host Unreachable</span><br><span class="line">From 192.168.123.100 icmp_seq=3 Destination Host Unreachable</span><br><span class="line">From 192.168.123.100 icmp_seq=4 Destination Host Unreachable</span><br><span class="line">^C</span><br><span class="line">--- 192.168.123.55 ping statistics ---</span><br><span class="line">6 packets transmitted, 0 received, +4 errors, 100% packet loss, time 4999ms</span><br><span class="line">pipe 4</span><br></pre></td></tr></table></figure><h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p><em>这里我是ping我的旁路由（禁ping）</em></p><p>可以发数据过去，对方不回复（mac表中有对方地址）</p><p>一般为对方不在线或者屏蔽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[C:\~]$ ping 192.168.1.1</span><br><span class="line"></span><br><span class="line">正在 Ping 192.168.1.1 具有 32 字节的数据:</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br><span class="line"></span><br><span class="line">192.168.1.1 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)，</span><br></pre></td></tr></table></figure><p>这里我发现一个其他的现象，我在使用linux来ping没有禁ping时的旁路由时</p><p>首先得到了一个1.39ms的回复</p><p>接着我的网关所在的路由告知了我一个新的下一跳</p><p>接下来的延迟都在0.3ms左右了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ping 192.168.1.1</span><br><span class="line">PING 192.168.1.1 (192.168.1.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.1.1: icmp_seq=1 ttl=64 time=1.39 ms</span><br><span class="line">From 192.168.123.1 icmp_seq=2 Redirect Host(New nexthop: 192.168.1.1)</span><br><span class="line">From 192.168.123.1: icmp_seq=2 Redirect Host(New nexthop: 192.168.1.1)</span><br><span class="line">64 bytes from 192.168.1.1: icmp_seq=2 ttl=64 time=0.402 ms</span><br><span class="line">64 bytes from 192.168.1.1: icmp_seq=3 ttl=64 time=0.371 ms</span><br><span class="line">64 bytes from 192.168.1.1: icmp_seq=4 ttl=64 time=0.319 ms</span><br><span class="line">64 bytes from 192.168.1.1: icmp_seq=5 ttl=64 time=0.303 ms</span><br><span class="line">64 bytes from 192.168.1.1: icmp_seq=6 ttl=64 time=0.346 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.1.1 ping statistics ---</span><br><span class="line">6 packets transmitted, 6 received, +1 errors, 0% packet loss, time 5001ms</span><br><span class="line">rtt min/avg/max/mdev = 0.303/0.523/1.399/0.393 ms</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ICMP&quot;&gt;&lt;a href=&quot;#ICMP&quot; class=&quot;headerlink&quot; title=&quot;ICMP&quot;&gt;&lt;/a&gt;ICMP&lt;/h1&gt;&lt;p&gt;&lt;em&gt;英特网控制消息协议&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在网络设备间传递各种差错和控制信息  &lt;/p&gt;
&lt;blockquote&gt;
      
    
    </summary>
    
    
      <category term="路由交换" scheme="https://eeeje.com/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2/"/>
    
    
      <category term="学习" scheme="https://eeeje.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ARP学习笔记</title>
    <link href="https://eeeje.com/2019/11/09/ARP/"/>
    <id>https://eeeje.com/2019/11/09/ARP/</id>
    <published>2019-11-08T17:09:07.000Z</published>
    <updated>2019-11-18T11:16:12.492Z</updated>
    
    <content type="html"><![CDATA[<p>数据链路懒得没做笔记</p><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><p>地址解析协议</p><p>通过目的IP来获取MAC地址的过程由ARP来实现</p><h2 id="ARP原理"><a href="#ARP原理" class="headerlink" title="ARP原理"></a>ARP原理</h2><p>前提，数据包中，源mac，源IP，目标IP都是已知的，那么，目标mac是怎么得来的呢</p><p>简单的说</p><blockquote><p>小王：谁是小李，告诉小王</p><p>小李：小李在第一排第一个座位</p></blockquote><p><img src="https://oss.sadly.pw/images/R-S/2019-11-08/Snipaste_2019-11-08_22-39-04.jpg" alt=""></p><p>这是我在局域网抓的包，科来软件可以直接看到，在我ping 192.168.123.1的时候他发送一个包，此时电脑网卡的mac缓存中并没有192.168.1.1的mac地址，所以他的目的地址为<code>FF-FF-FF-FF-FF-FF(广播)</code></p><p>问：谁是192.168.123.1，告诉192.168.123.123（电脑的ip）</p><p>接着，路由器回复给电脑一个包，192.168.123.1在B0:25:AA:23:AB:74  (Private)，（前6位16进制数代表厂商）</p><p>这就是一个完整的arp，一次Request和一次Response</p><p><strong>再用ensp来抓包看（<code>stp disable</code>关闭生成树）</strong></p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-08/Snipaste_2019-11-08_22-48-33.jpg" alt=""></p><p>在这里我发现了一个区别，在真机抓包时，以太网封装的目的地址为<code>FF-FF-FF-FF-FF-FF</code>但是arp协议中却是<code>00-00-00-00-00-00F</code>，模拟器中则都是<code>FF-FF-FF-FF-FF-FF</code></p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-08/Snipaste_2019-11-08_22-56-59.jpg" alt=""></p><p>总结：</p><p>发送 源ip 源mac 目标ip 目标ip</p><p>相应 源ip 源mac 目标ip 目标ip</p><p><em>拓展</em></p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-08/Snipaste_2019-11-08_23-08-22.jpg" alt=""></p><p>MAC地址扫描器的原理就是发出很多个arp的包，挨个去问。</p><h2 id="ARP缓存"><a href="#ARP缓存" class="headerlink" title="ARP缓存"></a>ARP缓存</h2><p><img src="https://oss.sadly.pw/images/R-S/2019-11-08/Snipaste_2019-11-08_23-15-42.jpg" alt=""></p><h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><p>更改源MAC达到“欺骗”的效果</p><p>情景：主机3修改为和主机2相同的ip，主机1在进行发包时会向最新收到的Response报文中的mac地址发送</p><blockquote><p>主机1：谁是1.1.1.2</p><p>主机2：1.1.1.2在a地址（真实）</p><p>主机3：1.1.1.2在b地址（欺骗）</p><p>主机1将1.1.1.2的包发往b地址</p></blockquote><p>实践</p><p>使用工具抓到网关回给我的包，修改arp中的源mac地址，再发送广播报文进行arp欺骗</p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-08/Snipaste_2019-11-09_00-08-46.jpg" alt=""></p><p>下面可以看到我的电脑arp缓存中的mac已经变为了<code>11:22:33:44:55:66</code>抓包软件也是抓到了我不停发送的包。</p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-08/Snipaste_2019-11-09_00-22-27.jpg" alt=""></p><h4 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h4><p>主机上的防范，通过软件绑定网关的ip与mac，保护这台电脑不被“欺骗”</p><p>交换机：拥有很完善的一套防范设施。（np安全）</p><h2 id="免费ARP"><a href="#免费ARP" class="headerlink" title="免费ARP"></a>免费ARP</h2><p>免费()ARP可以检测出ip地址是否冲突</p><p>更改ip以后，电脑会先询问网络中有没有人使用这个ip，如果没有回复，则使用这个ip</p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-08/Snipaste_2019-11-09_00-51-41.jpg" alt=""></p><p>当这个ip有人使用时，证明地址冲突，电脑则会自动配置一个无效的地址</p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-08/Snipaste_2019-11-09_01-01-54.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ARP报文不能穿越路由器，不能转发到其他广播域</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据链路懒得没做笔记&lt;/p&gt;
&lt;h2 id=&quot;ARP&quot;&gt;&lt;a href=&quot;#ARP&quot; class=&quot;headerlink&quot; title=&quot;ARP&quot;&gt;&lt;/a&gt;ARP&lt;/h2&gt;&lt;p&gt;地址解析协议&lt;/p&gt;
&lt;p&gt;通过目的IP来获取MAC地址的过程由ARP来实现&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="路由交换" scheme="https://eeeje.com/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2/"/>
    
    
      <category term="学习" scheme="https://eeeje.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>11.5笔记</title>
    <link href="https://eeeje.com/2019/11/05/11.5/"/>
    <id>https://eeeje.com/2019/11/05/11.5/</id>
    <published>2019-11-05T11:05:44.000Z</published>
    <updated>2019-11-18T11:16:12.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vlan"><a href="#vlan" class="headerlink" title="vlan"></a>vlan</h3><p>路由器分割广播域</p><p>跨vlan通信</p><blockquote><p>单臂路由</p><p>子接口</p><p>SVI口 </p></blockquote><p>问题： acess trunk hybrid 什么时候打tag 什么时候剥离tag的问题？ </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vlan&quot;&gt;&lt;a href=&quot;#vlan&quot; class=&quot;headerlink&quot; title=&quot;vlan&quot;&gt;&lt;/a&gt;vlan&lt;/h3&gt;&lt;p&gt;路由器分割广播域&lt;/p&gt;
&lt;p&gt;跨vlan通信&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单臂路由&lt;/p&gt;
&lt;p&gt;子接口&lt;/p
      
    
    </summary>
    
    
      <category term="路由交换" scheme="https://eeeje.com/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2/"/>
    
    
      <category term="课程" scheme="https://eeeje.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>1103 OSPF笔记</title>
    <link href="https://eeeje.com/2019/11/03/1103/"/>
    <id>https://eeeje.com/2019/11/03/1103/</id>
    <published>2019-11-03T11:05:44.000Z</published>
    <updated>2019-11-18T11:16:12.477Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ospf基础"><a href="#ospf基础" class="headerlink" title="ospf基础"></a>ospf基础</h3><p>RIP是一个矢量距离路由协议</p><p>OSPF区域内靠SPF算法保证无路由环路</p><p>区域间依靠 区域间的链接规则 </p><p> 骨干区域 area0区域 非骨干区域围绕骨干区域星型拓扑 </p><p>推荐《数据结构》</p><p>三个路由器 每个都启用ospf  同区域 </p><p>lsa （链路状态信息，链路状态通告）：接口信息等</p><p>互相 flooding（泛洪）有平衡点  </p><p>每台都有一个lsdb 链路数据库   三份数据库</p><p>每一个都去通过spf计算从自己出发的最短路径</p><p>画出一个有向图（树状图-无环路）</p><h3 id="OSPF报文"><a href="#OSPF报文" class="headerlink" title="OSPF报文"></a>OSPF报文</h3><p>5种报文 hello报文 dd 报文 lsr 报文 lsu报文 lsack报文</p><p>报文头相同</p><p>但凡是协议，都有状态机</p><p><em>路由交换 安全 wlan</em></p><p>邻居状态机 （？？？）</p><p>Router ID是一个32位的值</p><p>2-way到ExStart是选DR</p><p>MA网络广播</p><p>路由之间连接属于ma无论几个相连</p><p><strong>DR和BDR的好处是什么？</strong></p><p> <img src="https://oss.sadly.pw/images/R-S/2019-11-08/image-20191103215213578.png" alt=""> </p><p>先选BDR再选DR</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ospf基础&quot;&gt;&lt;a href=&quot;#ospf基础&quot; class=&quot;headerlink&quot; title=&quot;ospf基础&quot;&gt;&lt;/a&gt;ospf基础&lt;/h3&gt;&lt;p&gt;RIP是一个矢量距离路由协议&lt;/p&gt;
&lt;p&gt;OSPF区域内靠SPF算法保证无路由环路&lt;/p&gt;
&lt;p&gt;区域间依
      
    
    </summary>
    
    
      <category term="路由交换" scheme="https://eeeje.com/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2/"/>
    
    
      <category term="课程" scheme="https://eeeje.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>华为设备OSPF路由的配置</title>
    <link href="https://eeeje.com/2019/11/03/OSPF/"/>
    <id>https://eeeje.com/2019/11/03/OSPF/</id>
    <published>2019-11-02T17:44:10.000Z</published>
    <updated>2019-11-18T11:16:12.879Z</updated>
    
    <content type="html"><![CDATA[<p><strong>实验中有很多个人的理解，因为基础较差，难免会有一些错误的地方，如果您有建议或理解，欢迎在文章下方留言😁</strong></p><p><strong>文章较长，下方浮动栏有文章目录按钮哟😃</strong></p><h2 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h2><p>Open Shortest Path First翻译过来是开放式最短路径优先</p><p>华为设备中OSPF的优先级是 10 仅低于直连路由</p><h2 id="OSPF单区域配置"><a href="#OSPF单区域配置" class="headerlink" title="OSPF单区域配置"></a>OSPF单区域配置</h2><h3 id="实验设备"><a href="#实验设备" class="headerlink" title="实验设备"></a>实验设备</h3><p>HUAWEI AR2220   PC</p><h3 id="实验拓扑-amp-规划"><a href="#实验拓扑-amp-规划" class="headerlink" title="实验拓扑&amp;规划"></a>实验拓扑&amp;规划</h3><p>我并没有使用实验指导中提供的IP规划</p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-2/Snipaste_2019-11-02_16-23-38.jpg" alt=""></p><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>通过配置单个OSPF区域的配置，使PC1、PC2、PC2所在网络互通</p><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><ol><li><p>为各接口以及PC配置IP，并确保每一对接口之间连通。</p></li><li><p>为路由器配置OSPF</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1]ospf 1     //1为进程号</span><br></pre></td></tr></table></figure><p>进入骨干区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1-ospf-1]area 0</span><br></pre></td></tr></table></figure><p>接下来就可以来指定运行OSPF协议的接口和接口所属的区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1-ospf-1-area-0.0.0.0]network 172.10.1.0 0.0.0.255</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]network 10.0.0.0 0.0.0.3</span><br><span class="line">[R1-ospf-1-area-0.0.0.0]network 10.0.0.4 0.0.0.3</span><br></pre></td></tr></table></figure><p>Q：这里的命令我不太理解<br><strong>猜测</strong>后面的应该为255减去原来的掩码位（数通基础不好）</p><ol start="3"><li>检查通告情况，命令：<code>display ospf interface</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  OSPF Process 1 with Router ID 172.10.1.254</span><br><span class="line">    Interfaces </span><br><span class="line"></span><br><span class="line">Area: 0.0.0.0     (MPLS TE not enabled)</span><br><span class="line">IP Address    Type      tate  Cost Pri      DR           BDR </span><br><span class="line">172.10.1.254  Broadcast  DR    1    1  172.10.1.254    0.0.0.0</span><br><span class="line">10.0.0.2      Broadcast  DR    1    1    10.0.0.2      0.0.0.0</span><br><span class="line">10.0.0.6      Broadcast  DR    1    1    10.0.0.6      0.0.0.0</span><br></pre></td></tr></table></figure><p>这里可以看到area域为0.0.0.0，RoutID为172.10.1.254 ，另外可以看待通告出去三个接口的类型为广播，接口状态为DR，即都是所在网络中的指定路由器。<br><em>拓展：DR ：一个广播性、多接入网络中的指定路由器，个人理解为一个网络中的“管事的”</em><br>Q：为什么会选这个ip做为RoutID？</p><ol start="4"><li><p>配置R2 R3</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[R2]ospf 1</span><br><span class="line">[R2-ospf-1]area 0</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 10.0.0.1 0.0.0.3</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 10.0.0.9 0.0.0.3</span><br><span class="line">[R2-ospf-1-area-0.0.0.0]network 172.10.2.254 0.0.0.255</span><br><span class="line"></span><br><span class="line">[R3]ospf 1</span><br><span class="line">[R3-ospf-1]area 0</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 10.0.0.5 0.0.0.3</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 10.0.0.10 0.0.0.3</span><br><span class="line">[R3-ospf-1-area-0.0.0.0]network 172.10.3.1 0.0.0.255</span><br></pre></td></tr></table></figure></li></ol><p><strong>这里我配置完以后发现，命令敲错了，network 后面的直接输了接口地址，但是我去查通告情况，看起来是正常的，我觉得，后面的那个字段和掩码有关，掩码是用来定义网络的，所以说我输入的32位的地址被定义为了当前ip所在的网络，暂且不去管他。</strong></p><ol start="5"><li>检查OSPF邻居<code>display ospf peer</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">OSPF Process 1 with Router ID 172.10.1.254</span><br><span class="line"> Neighbors</span><br><span class="line"></span><br><span class="line">Area 0.0.0.0 interface 10.0.0.2(GigabitEthernet0/0/0)&apos;s neighbors</span><br><span class="line">Router ID: 172.10.2.254     Address: 10.0.0.1        </span><br><span class="line">  State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">  DR: 10.0.0.2  BDR: 10.0.0.1  MTU: 0    </span><br><span class="line">  Dead timer due in 39  sec </span><br><span class="line">  Retrans timer interval: 5 </span><br><span class="line">  Neighbor is up for 00:35:24     </span><br><span class="line">  Authentication Sequence: [ 0 ] </span><br><span class="line"></span><br><span class="line">    Neighbors </span><br><span class="line"></span><br><span class="line">Area 0.0.0.0 interface 10.0.0.6(GigabitEthernet0/0/2)&apos;s neighbors</span><br><span class="line">Router ID: 10.0.0.10        Address: 10.0.0.5        </span><br><span class="line">  State: Full  Mode:Nbr is  Slave  Priority: 1</span><br><span class="line">  DR: 10.0.0.6  BDR: 10.0.0.5  MTU: 0    </span><br><span class="line">  Dead timer due in 29  sec </span><br><span class="line">  Retrans timer interval: 5 </span><br><span class="line">  Neighbor is up for 00:28:32     </span><br><span class="line">  Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure><p>这里看到了两个OSPF邻居RoutID分别为：172.10.1.254，10.0.0.10（这个RoutID用了路由之间的接口ID）</p><p><em>猜测：RoutID的原则是不重复，所以说是不是随便指定一个ip做为RoutID</em><br><em>实验：我新开了一台路由器去尝试，发现 RoutID的选择是根据第一个配置的接口ip进行选择的。我回头去看R3的数据，我第一个配置的接口Ip的确是1.0.0.10/30</em></p><ul><li>现在再去查通告情况，看一下前面看不懂的<code>DR</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> OSPF Process 1 with Router ID 172.10.1.254</span><br><span class="line">    Interfaces </span><br><span class="line"></span><br><span class="line">Area: 0.0.0.0    (MPLS TE not enabled)</span><br><span class="line">IP Address    Type       State  Cost  Pri    DR            BDR </span><br><span class="line">172.10.1.254  Broadcast   DR     1     1   172.10.1.254  0.0.0.0</span><br><span class="line">10.0.0.2      Broadcast   DR     1     1   10.0.0.2      10.0.0.1</span><br><span class="line">10.0.0.6      Broadcast   DR     1     1   10.0.0.6      10.0.0.5</span><br></pre></td></tr></table></figure><p>DR是指定路由器，BDR是备份指定路由器，既然前面说到了DR是<code>管事的</code>那BDR就是<code>副管事的</code>，当<code>管事的</code>不在或者做错的时候，<code>副管事的</code>就出来接手，这两个<code>管事的</code>又是由大家选出来的，这里就涉及到OSPF的选举机制了，由于理论部分还没有学到这里，暂时放一下。</p><p>现在从表中看出，172.1.1.254是自己所在网络的DR，他的BDR是一个缺省状态，另外两个网络的BDR都是自己网络中存在于OSPF域中的地址</p><ol start="6"><li>再看看OSPF的路由表</li></ol><pre><code>Public routing table : OSPF     Destinations : 3        Routes : 4        OSPF routing table status : &lt;Active&gt;     Destinations : 3        Routes : 4Destination/Mask Proto Pre Cost Flags NextHop    Interface   10.0.0.8/30   OSPF  10   2     D   10.0.0.1 GigabitEthernet 0/0/0                 OSPF  10   2     D   10.0.0.5 GigabitEthernet 0/0/2 172.10.2.0/24   OSPF  10   2     D   10.0.0.1 GigabitEthernet 0/0/0 172.10.3.0/24   OSPF  10   2     D   10.0.0.5 GigabitEthernet 0/0/2OSPF routing table status : &lt;Inactive&gt;     Destinations : 0        Routes : 0</code></pre><h3 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h3><ul><li>由<code>PC1</code>ping <code>PC2</code></li></ul><pre><code>PC&gt;ping 172.10.2.1Ping 172.10.2.1: 32 data bytes, Press Ctrl_C to breakRequest timeout!From 172.10.2.1: bytes=32 seq=2 ttl=126 time=16 msFrom 172.10.2.1: bytes=32 seq=3 ttl=126 time=15 msFrom 172.10.2.1: bytes=32 seq=4 ttl=126 time=16 msFrom 172.10.2.1: bytes=32 seq=5 ttl=126 time=16 ms--- 172.10.2.1 ping statistics ---  5 packet(s) transmitted  4 packet(s) received  20.00% packet loss  round-trip min/avg/max = 0/15/16 ms</code></pre><p>单区域的实验结束</p><h2 id="OSPF多区域配置"><a href="#OSPF多区域配置" class="headerlink" title="OSPF多区域配置"></a>OSPF多区域配置</h2><p>在网络规模很大的时候，就要分为多个自治域去管理，否则每个路由上的链路状态数据库将会非常的巨大，这就考虑到了路由器的硬件因素，打个简单的比方，大家都知道π=3.141592653…但是这个值不需要我们每次使用的时候都拿去算，因为已经有人算好了，拿来用就好了，多区域就是不同as域的计算、选举，都是独立的，由边界路由提供区域间的联系。</p><p>关于链路数据库大小的概念，这里拿一台来自俄勒冈大学全球BGP路由表浏览项目的路由器打个比方（好像关系不大🤔）<br>这是一台思科的设备，使用的BGP路由<br><img src="https://oss.sadly.pw/images/R-S/2019-11-2/Snipaste_2019-11-02_19-55-51.jpg" alt=""><br>他的路由表是一个很庞大的数量<br><img src="https://oss.sadly.pw/images/R-S/2019-11-2/Snipaste_2019-11-02_19-57-13.jpg" alt=""><br>使用的内存也达到了8.5G左右</p><p>而我们实验中用到的AR2220的内存仅有1G<br><img src="https://oss.sadly.pw/images/R-S/2019-11-2/Snipaste_2019-11-02_19-59-47.jpg" alt=""><br><em>好像ospf多域解决的是计算等问题，而且ospf和bgp的机制也有很大不同😓，上面这部分就当个拓展，另外在百度的时候发现了一段有意思的话：</em></p><blockquote><p><em>OSPF：“身如路由器，心似转发表，报文何其多，日夜勤查找。”</em><br><em>BGP：“路由本非器，转发何需表？报文虽然多，自有他人找。”</em></p></blockquote><p><em>先收藏起来</em></p><p>言归正传</p><h3 id="实验拓扑-amp-规划-1"><a href="#实验拓扑-amp-规划-1" class="headerlink" title="实验拓扑&amp;规划"></a>实验拓扑&amp;规划</h3><p>基于上一部分是实验进行改动<br><img src="https://oss.sadly.pw/images/R-S/2019-11-2/Snipaste_2019-11-02_23-42-00.jpg" alt=""><br>其中R1 R2 R3 R4 在区域 0 中，R1 R2 R5在区域 1 中，R3 R4 R6 在区域 2 中</p><h3 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h3><p>R1 R2 R3 R4 为核心区域，在同一个as域中，其中R1 R2 与 R5 同在区域 1 中，R3 R4 与 R5 同在区域 2 中<br><em>从本质上来讲，可以理解为“分布式计算”，区域1计算出a=1，区域2计算出b=2，区域3计算出c=3,甲在区域1和2中，乙在区域2和3中，甲和乙互相沟通后，大家都知道a,b,c的值了。</em></p><h3 id="实验过程-1"><a href="#实验过程-1" class="headerlink" title="实验过程"></a>实验过程</h3><ol><li><p>配置各接口IP</p></li><li><p>配置骨干区域，将R1 R2 R3 R4 配入area 0 中，并互相通告</p></li></ol><p><img src="https://oss.sadly.pw/images/R-S/2019-11-2/Snipaste_2019-11-03_00-47-57.jpg" alt=""></p><ol start="3"><li>配置区域A 即R1 R2 R5 配入 area 1 中，其中R1 R2只通告与R5相连的接口</li></ol><p><img src="https://oss.sadly.pw/images/R-S/2019-11-2/Snipaste_2019-11-03_01-00-31.jpg" alt=""></p><ol start="4"><li>配置区域B 即R3 R4 R6 配入 area 2 中，其中R3 R4只通告与R6相连的接口</li></ol><p><img src="https://oss.sadly.pw/images/R-S/2019-11-2/Snipaste_2019-11-03_01-06-42.jpg" alt=""></p><p>邻区没有问题</p><ul><li>查一下OSPF链路状态数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]display ospf lsdb</span><br><span class="line"></span><br><span class="line">OSPF Process 1 with Router ID 10.0.0.18</span><br><span class="line">  Link State Database </span><br><span class="line">        Area: 0.0.0.2</span><br><span class="line"> Type   LinkState ID  AdvRouter      Age  Len Sequence Metric</span><br><span class="line">Router  10.0.0.14     10.0.0.14      411  36  80000005   1</span><br><span class="line">Router  172.10.3.254  172.10.3.254   421  36  80000005   1</span><br><span class="line">Router  10.0.0.18     10.0.0.18      409  60  80000008   1</span><br><span class="line">Network 10.0.0.17     10.0.0.14      411  32  80000002   0</span><br><span class="line">Network 10.0.0.22     172.10.3.254   421  32  80000002   0</span><br><span class="line">Sum-Net 172.10.3.0    172.10.3.254   615  28  80000001   1</span><br><span class="line">Sum-Net 172.10.3.0    10.0.0.14      560  28  80000001   2</span><br><span class="line">Sum-Net 172.10.2.0    172.10.3.254   615  28  80000001   2</span><br><span class="line">Sum-Net 172.10.2.0    10.0.0.14      560  28  80000001   3</span><br><span class="line">Sum-Net 172.10.1.0    172.10.3.254   615  28  80000001   3</span><br><span class="line">Sum-Net 172.10.1.0    10.0.0.14      560  28  80000001   3</span><br><span class="line">Sum-Net 10.0.0.12     172.10.3.254   615  28  80000001   2</span><br><span class="line">Sum-Net 10.0.0.12     10.0.0.14      560  28  80000001   1</span><br><span class="line">Sum-Net 10.0.0.8      172.10.3.254   615  28  80000001   1</span><br><span class="line">Sum-Net 10.0.0.8      10.0.0.14      560  28  80000001   2</span><br><span class="line">Sum-Net 10.0.0.4      172.10.3.254   615  28  80000001   1</span><br><span class="line">Sum-Net 10.0.0.4      10.0.0.14      560  28  80000001   1</span><br><span class="line">Sum-Net 10.0.0.0      172.10.3.254   615  28  80000001   2</span><br><span class="line">Sum-Net 10.0.0.0      10.0.0.14      560  28  80000001   2</span><br><span class="line">Sum-Net 10.0.0.28     172.10.3.254   615  28  80000001   2</span><br><span class="line">Sum-Net 10.0.0.28     10.0.0.14      560  28  80000001   3</span><br><span class="line">Sum-Net 10.0.0.24     172.10.3.254   615  28  80000001   3</span><br><span class="line">Sum-Net 10.0.0.24     10.0.0.14      560  28  80000001   2</span><br></pre></td></tr></table></figure><p>除了我们通告的路由之外，其他的路由都是Sum-Net类型的<br><em>我去搜Sum-Net是什么，并没有搜到，但是发现启示录中有一条Sum-Net LSA会引起路由计算，引发OSPF路由震荡</em></p><h3 id="实验验证-1"><a href="#实验验证-1" class="headerlink" title="实验验证"></a>实验验证</h3><p><code>PC1</code> ping <code>PC4</code></p><pre><code>PC&gt;ping 172.10.4.1Ping 172.10.4.1: 32 data bytes, Press Ctrl_C to breakFrom 172.10.1.1: Destination host unreachable</code></pre><p>失败</p><ul><li><p>排障</p><p>先用PC1与PC4 ping各自的网关  –成功<br>查看R5 R6路由表                          –有对应条目<br>检查电脑配置                                –未配置网关</p></li></ul><pre><code>PC&gt;ping 172.10.4.1Ping 172.10.4.1: 32 data bytes, Press Ctrl_C to breakRequest timeout!From 172.10.4.1: bytes=32 seq=2 ttl=124 time=31 msFrom 172.10.4.1: bytes=32 seq=3 ttl=124 time=31 msFrom 172.10.4.1: bytes=32 seq=4 ttl=124 time=31 msFrom 172.10.4.1: bytes=32 seq=5 ttl=124 time=32 ms--- 172.10.4.1 ping statistics ---  5 packet(s) transmitted  4 packet(s) received  20.00% packet loss  round-trip min/avg/max = 0/31/32 ms</code></pre><p>实验完成</p><h2 id="OSPF的认证"><a href="#OSPF的认证" class="headerlink" title="OSPF的认证"></a>OSPF的认证</h2><p>“对暗号” 我理解为防止非法路由加入网络中</p><h3 id="实验拓扑-规划"><a href="#实验拓扑-规划" class="headerlink" title="实验拓扑/规划"></a>实验拓扑/规划</h3><p><img src="https://oss.sadly.pw/images/R-S/2019-11-3/Snipaste_2019-11-03_10-30-02.jpg" alt=""></p><p>R1的loopback的地址是1.1.1.1 ，R2的是2.2.2.2，以此类推</p><h3 id="实验目的-2"><a href="#实验目的-2" class="headerlink" title="实验目的"></a>实验目的</h3><p>在区域0和1配上区域认证，0开启密文认证，1开启明文认证</p><h3 id="实验过程-2"><a href="#实验过程-2" class="headerlink" title="实验过程"></a>实验过程</h3><h4 id="OSPF区域认证"><a href="#OSPF区域认证" class="headerlink" title="OSPF区域认证"></a>OSPF区域认证</h4><ol><li><p>配置各接口IP，并配置loopback地址</p></li><li><p>将R2 R3 R5 R6 配入area 0 中，并通告网络，将R1 R2 R4 配入area 1 中，同样通告网络</p><p>需要注意的是，每台设备都需要把loopback地址通告出去</p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-3/Snipaste_2019-11-03_11-33-35.jpg" alt=""></p></li><li><p>配置区域</p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-3/Snipaste_2019-11-03_14-15-00.jpg" alt=""></p><p>可以看到R2有了正确的邻居关系</p></li><li><p>给区域1配置区域认证</p><p>R1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]ospf 1</span><br><span class="line">[Huawei-ospf-1]ar</span><br><span class="line">[Huawei-ospf-1]area 1</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1]au</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1]authentication-mode s</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1]authentication-mode simple p</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1]authentication-mode simple plain huawei1</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1]disp</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1]display th</span><br><span class="line">[V200R003C00]</span><br><span class="line">#</span><br><span class="line"> area 0.0.0.1 </span><br><span class="line">  authentication-mode simple plain huawei1 </span><br><span class="line">  network 1.1.1.1 0.0.0.0 </span><br><span class="line">  network 10.0.0.0 0.0.0.3 </span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure><p><em>这时候可以看到口令为<code>huawei1</code></em></p></li></ol><p>重新配置一遍</p><p><em>发现个有趣的东西，按上键的时候，原来输入的口令会变成<code>******</code></em></p><p>现在口令变为了密文显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Huawei-ospf-1-area-0.0.0.1]authentication-mode simple huawei1</span><br><span class="line">[Huawei-ospf-1-area-0.0.0.1]display th</span><br><span class="line">[V200R003C00]</span><br><span class="line">#</span><br><span class="line"> area 0.0.0.1 </span><br><span class="line">  authentication-mode simple cipher %$%$6iLJ4J=YgV@LW7RZhQgXRp_4%$%$ </span><br><span class="line">  network 1.1.1.1 0.0.0.0 </span><br><span class="line">  network 10.0.0.0 0.0.0.3 </span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure><p>R2也没有了R1的邻居关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;R2&gt;display ospf 1 peer brief </span><br><span class="line"></span><br><span class="line"> OSPF Process 1 with Router ID 10.0.0.2</span><br><span class="line">  Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id          Interface                        Neighbor id      State    </span><br><span class="line"> 0.0.0.0          GigabitEthernet0/0/1             10.0.0.6         Full        </span><br><span class="line"> 0.0.0.1          GigabitEthernet0/0/2             4.4.4.4          Full        </span><br><span class="line"> ----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><ol start="5"><li>接下来配R2 R4的认证</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[R2]ospf 1</span><br><span class="line">[R2-ospf-1]area 1</span><br><span class="line">[R2-ospf-1-area-0.0.0.1]au</span><br><span class="line">[R2-ospf-1-area-0.0.0.1]authentication-mode s</span><br><span class="line">[R2-ospf-1-area-0.0.0.1]authentication-mode simple p</span><br><span class="line">[R2-ospf-1-area-0.0.0.1]authentication-mode simple plain huawei1</span><br><span class="line">[R2-ospf-1-area-0.0.0.1]authentication-mode simple huawei1</span><br><span class="line">[R2-ospf-1-area-0.0.0.1]display ospf 1 peer brief </span><br><span class="line"></span><br><span class="line"> OSPF Process 1 with Router ID 10.0.0.2</span><br><span class="line">  Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id          Interface                        Neighbor id      State    </span><br><span class="line"> 0.0.0.0          GigabitEthernet0/0/1             10.0.0.6         Full        </span><br><span class="line"> 0.0.0.1          GigabitEthernet0/0/0             10.0.0.1         Full        </span><br><span class="line"> ----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>可以看到现在R2与R1的邻居关系恢复了，没有了R4的邻居，接着去配R4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[R4-ospf-1-area-0.0.0.1]display th</span><br><span class="line">[V200R003C00]</span><br><span class="line">#</span><br><span class="line"> area 0.0.0.1 </span><br><span class="line">  authentication-mode simple cipher %$%$tuiTSpt&apos;-/`8ey(B&#125;PlFR&amp;~y%$%$ </span><br><span class="line">  network 4.4.4.4 0.0.0.0 </span><br><span class="line">  network 10.0.0.16 0.0.0.3 </span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure><p>R2的邻居关系也正常了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;R2&gt;display ospf 1 peer brief </span><br><span class="line"></span><br><span class="line"> OSPF Process 1 with Router ID 10.0.0.2</span><br><span class="line">  Peer Statistic Information</span><br><span class="line"> ----------------------------------------------------------------------------</span><br><span class="line"> Area Id          Interface                        Neighbor id      State    </span><br><span class="line"> 0.0.0.0          GigabitEthernet0/0/1             10.0.0.6         Full        </span><br><span class="line"> 0.0.0.1          GigabitEthernet0/0/2             4.4.4.4          Full        </span><br><span class="line"> 0.0.0.1          GigabitEthernet0/0/0             10.0.0.1         Full        </span><br><span class="line"> ----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="OSPF链路验证"><a href="#OSPF链路验证" class="headerlink" title="OSPF链路验证"></a>OSPF链路验证</h4><ol><li><p>在R2与R4之间部署MD5的链路认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R2-GigabitEthernet0/0/2]ospf authentication-mode md5 1 huawei5</span><br></pre></td></tr></table></figure><p><img src="https://oss.sadly.pw/images/R-S/2019-11-3/Snipaste_2019-11-03_15-05-49.jpg" alt=""></p><p>去看邻居信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;R2&gt;display ospf 1 peer brief </span><br><span class="line"></span><br><span class="line"> OSPF Process 1 with Router ID 10.0.0.2</span><br><span class="line">  Peer Statistic Information</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"> Area Id          Interface                        Neighbor id      State    </span><br><span class="line"> 0.0.0.0          GigabitEthernet0/0/1             10.0.0.6         Full        </span><br><span class="line"> 0.0.0.1          GigabitEthernet0/0/0             10.0.0.1         Full        </span><br><span class="line"> ----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>现在与R4的邻居没有了，因为R2与R4连接的接口被配上了链路认证</p></li></ol><ol start="2"><li><p>给R4也配上链路认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> OSPF Process 1 with Router ID 10.0.0.2</span><br><span class="line">  Peer Statistic Information</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"> Area Id          Interface                        Neighbor id      State    </span><br><span class="line"> 0.0.0.0          GigabitEthernet0/0/1             10.0.0.6         Full        </span><br><span class="line"> 0.0.0.1          GigabitEthernet0/0/2             4.4.4.4          Full        </span><br><span class="line"> 0.0.0.1          GigabitEthernet0/0/0             10.0.0.1         Full        </span><br><span class="line"> ----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>R2的与R4的邻居重新建立</p></li></ol><h4 id="OSPF被动接口配置"><a href="#OSPF被动接口配置" class="headerlink" title="OSPF被动接口配置"></a>OSPF被动接口配置</h4><p>让一个接口从“参与者”变为“使用者”</p><h5 id="拓扑-amp-规划"><a href="#拓扑-amp-规划" class="headerlink" title="拓扑&amp;规划"></a>拓扑&amp;规划</h5><p><img src="https://oss.sadly.pw/images/R-S/2019-11-3/Snipaste_2019-11-03_15-46-07.jpg" alt=""></p><h5 id="实验过程-3"><a href="#实验过程-3" class="headerlink" title="实验过程"></a>实验过程</h5><ol><li><p>配置接口ip，并且都放入area 0 中</p></li><li><p>对PC上的接口进行抓包，可以看到有很多OSPF的hello packet报文，报文中包含了本area中的信息</p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-3/Snipaste_2019-11-03_16-11-32.jpg" alt=""></p><p>所以需要配置被动接口，禁止连接终端的接口接收发送OSPF报文</p></li><li><p>将与终端相连的接口配置为被动接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[R4]ospf 1</span><br><span class="line">[R4-ospf-1]sil</span><br><span class="line">[R4-ospf-1]silent-interface g 0/0/2</span><br><span class="line">[R4-ospf-1]display th</span><br><span class="line">[V200R003C00]</span><br><span class="line">#</span><br><span class="line">ospf 1 </span><br><span class="line"> silent-interface GigabitEthernet0/0/2</span><br><span class="line"> area 0.0.0.0 </span><br><span class="line">  network 10.0.0.16 0.0.0.7 </span><br><span class="line">  network 10.1.1.0 0.0.0.255 </span><br><span class="line">#</span><br><span class="line">return</span><br></pre></td></tr></table></figure></li><li><p>重新去抓包，就不会再发现有来自OSPF的报文了</p></li></ol><h5 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h5><p>既然被动接口会使当前接口不再发送和接收OSPF的报文，所以不可以配置在路由之间的接口上，否则会使当前接口退出OSPF</p><h4 id="OSPF的Router-ID"><a href="#OSPF的Router-ID" class="headerlink" title="OSPF的Router-ID"></a>OSPF的Router-ID</h4><p>其实关于Router-ID，我之前就做了简单的验证，当时得出的结论是：</p><blockquote><p><em>猜测：RoutID的原则是不重复，所以说是不是随便指定一个ip做为RoutID</em><br>实验：我新开了一台路由器去尝试，发现 RoutID的选择是根据第一个配置的接口ip进行选择的。我回头去看R3的数据，我第一个配置的接口Ip的确是1.0.0.10/30</p></blockquote><p>完善下Router ID的选举规则</p><p>在没有手动配置Router-ID的情况下，第一个配置的接口IP，会被指定为Router-ID，如果这个IP被删除，如果当前有loopback地址，则Router-ID会被指定为loopback地址，如果没有，则会被指定为第二个配置的Router-ID，以此类推。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]int</span><br><span class="line">[Huawei]interface g 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip add 1.1.1.1 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]interface g 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip add 2.2.2.2 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]disp</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]display r</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]display ro</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]display route id</span><br><span class="line">RouterID:1.1.1.1                               //此时的RouterID为第一个配置的接口IP</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]interface g 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]undo ip add</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]display route id</span><br><span class="line">RouterID:2.2.2.2                               //删除第一个配置的接口IP后，被指定为第二个接口IP</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip add 1.1.1.1 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]interface l 0</span><br><span class="line">[Huawei-LoopBack0]ip add 6.6.6.6 32</span><br><span class="line">[Huawei-LoopBack0]interface g 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]undo ip ad</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]display route id</span><br><span class="line">RouterID:6.6.6.6                              //这时就会被指定为loopback地址</span><br></pre></td></tr></table></figure><ul><li><p>如果RouterID重复，会发生什么？</p><p><strong>简单拓扑</strong></p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-3/Snipaste_2019-11-03_17-19-32.jpg" alt=""></p></li></ul><p>配置相同的RouterID</p><p><em>修改完RouterID后，会有这样的提醒：路由器ID已修改，请手动重置相关协议更新路由器ID</em></p><p>现在去查看邻居</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> OSPF Process 1 with Router ID 1.1.1.1</span><br><span class="line"> Neighbors </span><br><span class="line"></span><br><span class="line">Area 0.0.0.0 interface 1.1.1.1(GigabitEthernet0/0/0)&apos;s neighbors</span><br><span class="line">Router ID: 1.1.1.2          Address: 1.1.1.2         </span><br><span class="line">  State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">  DR: 1.1.1.1  BDR: 1.1.1.2  MTU: 0    </span><br><span class="line">  Dead timer due in 40  sec </span><br><span class="line">  Retrans timer interval: 5 </span><br><span class="line">  Neighbor is up for 00:08:51     </span><br><span class="line">  Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure><p>Router ID还是原来的，结合之前的提醒，需要重置一下协议：<code>reset ospf process</code>（这个命令只可以在用户界面使用）</p><p>再去看邻居</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;display ospf peer  </span><br><span class="line"></span><br><span class="line">OSPF Process 1 with Router ID 6.6.6.6</span><br></pre></td></tr></table></figure><p>没有邻居了，那么路由自然也不会通告</p><p>再看一下不同区域的相同RouterID</p><p><img src="https://oss.sadly.pw/images/R-S/2019-11-3/Snipaste_2019-11-03_17-42-31.jpg" alt=""></p><p>两侧的路由拥有相同的RouterID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]display ospf lsdb</span><br><span class="line"> OSPF Process 1 with Router ID 6.6.6.6</span><br><span class="line"> Link State Database </span><br><span class="line">         Area: 0.0.0.0</span><br><span class="line"> Type      LinkState ID    AdvRouter          Age  Len   Sequence   Metric</span><br><span class="line"> Router    6.6.6.7         6.6.6.7            425  36    80000004       1</span><br><span class="line"> Router    6.6.6.6         6.6.6.6            592  36    80000007       1</span><br><span class="line"> Router    1.1.1.2         1.1.1.2            788  36    80000008       1</span><br><span class="line"> Router    1.1.1.1         1.1.1.1           1512  36    80000005       1</span><br><span class="line"> Network   1.1.1.1         6.6.6.6            592  32    80000002       0</span><br><span class="line"> Sum-Net   1.1.2.0         6.6.6.7            371  28    80000001       1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Huawei]ping 1.1.2.2</span><br><span class="line">  PING 1.1.2.2: 56  data bytes, press CTRL_C to break</span><br><span class="line">    Reply from 1.1.2.2: bytes=56 Sequence=1 ttl=254 time=30 ms</span><br><span class="line">    Reply from 1.1.2.2: bytes=56 Sequence=2 ttl=254 time=20 ms</span><br><span class="line">    Reply from 1.1.2.2: bytes=56 Sequence=3 ttl=254 time=30 ms</span><br><span class="line">    Reply from 1.1.2.2: bytes=56 Sequence=4 ttl=254 time=30 ms</span><br><span class="line">    Reply from 1.1.2.2: bytes=56 Sequence=5 ttl=254 time=30 ms</span><br><span class="line"></span><br><span class="line">  --- 1.1.2.2 ping statistics ---</span><br><span class="line">    5 packet(s) transmitted</span><br><span class="line">    5 packet(s) received</span><br><span class="line">    0.00% packet loss</span><br><span class="line">    round-trip min/avg/max = 20/28/30 ms</span><br></pre></td></tr></table></figure><p>可以看出来，并没有对网络造成影响。</p><p><strong>所以，RouterID在同区域内重叠是会影响ospf状态的，不同区域则不会</strong></p><h2 id="DR与BDR"><a href="#DR与BDR" class="headerlink" title="DR与BDR"></a>DR与BDR</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;R1&gt;display ospf peer b</span><br><span class="line"></span><br><span class="line"> OSPF Process 1 with Router ID 1.1.1.1</span><br><span class="line">  Peer Statistic Information</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"> Area Id          Interface                        Neighbor id      State    </span><br><span class="line"> 0.0.0.0          GigabitEthernet0/0/0             2.2.2.2          2-Way       </span><br><span class="line"> 0.0.0.0          GigabitEthernet0/0/0             3.3.3.3          Full        </span><br><span class="line"> 0.0.0.0          GigabitEthernet0/0/0             4.4.4.4          Full       </span><br><span class="line"> ----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;R1&gt;display ospf peer</span><br><span class="line"></span><br><span class="line"> OSPF Process 1 with Router ID 1.1.1.1</span><br><span class="line"> Neighbors </span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.1.1(GigabitEthernet0/0/0)&apos;s neighbors</span><br><span class="line"> Router ID: 2.2.2.2          Address: 192.168.1.2     </span><br><span class="line">   State: 2-Way  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 192.168.1.3  BDR: 192.168.1.4  MTU: 0    </span><br><span class="line">   Dead timer due in 37  sec </span><br><span class="line">   Retrans timer interval: 0 </span><br><span class="line">   Neighbor is up for 00:00:00     </span><br><span class="line">   Authentication Sequence: [ 0 ] </span><br><span class="line"></span><br><span class="line"> Router ID: 3.3.3.3          Address: 192.168.1.3     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 192.168.1.3  BDR: 192.168.1.4  MTU: 0    </span><br><span class="line">   Dead timer due in 30  sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:02:26     </span><br><span class="line">   Authentication Sequence: [ 0 ] </span><br><span class="line"></span><br><span class="line"> Router ID: 4.4.4.4          Address: 192.168.1.4     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 192.168.1.3  BDR: 192.168.1.4  MTU: 0    </span><br><span class="line">   Dead timer due in 32  sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:02:25     </span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure><p>此时R3为DR，R4为BDR</p><p>接着修改OSPF的网络类型为点到多点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ospf network-type p2mp</span><br></pre></td></tr></table></figure><p>此时可以看到，DR和BDR都是none</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;R1&gt;display ospf peer</span><br><span class="line"></span><br><span class="line"> OSPF Process 1 with Router ID 1.1.1.1</span><br><span class="line"> Neighbors </span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.1.1(GigabitEthernet0/0/0)&apos;s neighbors</span><br><span class="line"> Router ID: 2.2.2.2          Address: 192.168.1.2     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: None   BDR: None   MTU: 0    </span><br><span class="line">   Dead timer due in 100 sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:00:43     </span><br><span class="line">   Authentication Sequence: [ 0 ] </span><br><span class="line"></span><br><span class="line"> Router ID: 3.3.3.3          Address: 192.168.1.3     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: None   BDR: None   MTU: 0    </span><br><span class="line">   Dead timer due in 120 sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:00:15     </span><br><span class="line">   Authentication Sequence: [ 0 ] </span><br><span class="line"></span><br><span class="line"> Router ID: 4.4.4.4          Address: 192.168.1.4     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: None   BDR: None   MTU: 0    </span><br><span class="line">   Dead timer due in 103 sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:00:15     </span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure><p>所以说OSPF在点到多点的网络下不选举DR、BDR</p><p>接下来将网络类型还原</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ospf network-type broadcast</span><br></pre></td></tr></table></figure><p>修改DR优先级，R1：100  R2：50  R4：0   R3：默认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[R1-GigabitEthernet0/0/0]display ospf peer</span><br><span class="line"></span><br><span class="line"> OSPF Process 1 with Router ID 1.1.1.1</span><br><span class="line"> Neighbors </span><br><span class="line"></span><br><span class="line"> Area 0.0.0.0 interface 192.168.1.1(GigabitEthernet0/0/0)&apos;s neighbors</span><br><span class="line"> Router ID: 2.2.2.2          Address: 192.168.1.2     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 50</span><br><span class="line">   DR: 192.168.1.3  BDR: 192.168.1.1  MTU: 0    </span><br><span class="line">   Dead timer due in 40  sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:00:11     </span><br><span class="line">   Authentication Sequence: [ 0 ] </span><br><span class="line"></span><br><span class="line"> Router ID: 3.3.3.3          Address: 192.168.1.3     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 1</span><br><span class="line">   DR: 192.168.1.3  BDR: 192.168.1.1  MTU: 0    </span><br><span class="line">   Dead timer due in 35  sec </span><br><span class="line">   Retrans timer interval: 5 </span><br><span class="line">   Neighbor is up for 00:01:49     </span><br><span class="line">   Authentication Sequence: [ 0 ] </span><br><span class="line"></span><br><span class="line"> Router ID: 4.4.4.4          Address: 192.168.1.4     </span><br><span class="line">   State: Full  Mode:Nbr is  Master  Priority: 0</span><br><span class="line">   DR: 192.168.1.3  BDR: 192.168.1.1  MTU: 0    </span><br><span class="line">   Dead timer due in 36  sec </span><br><span class="line">   Retrans timer interval: 4 </span><br><span class="line">   Neighbor is up for 00:00:10     </span><br><span class="line">   Authentication Sequence: [ 0 ]</span><br></pre></td></tr></table></figure><p>此时R3是DR，R1是BDR</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;实验中有很多个人的理解，因为基础较差，难免会有一些错误的地方，如果您有建议或理解，欢迎在文章下方留言😁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文章较长，下方浮动栏有文章目录按钮哟😃&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;OSPF&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="路由交换" scheme="https://eeeje.com/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2/"/>
    
    
      <category term="课程" scheme="https://eeeje.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>华为设备静态路由的配置</title>
    <link href="https://eeeje.com/2019/11/01/Static/"/>
    <id>https://eeeje.com/2019/11/01/Static/</id>
    <published>2019-11-01T08:22:10.000Z</published>
    <updated>2019-11-18T11:16:13.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h2><p>一种手动配置的路由方式，各厂商对静态路由的优先级处理不同。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>在实验开始之前，首先了解一下华为设备的路由优先级（值越大优先级越小）</p><table><thead><tr><th>协议/种类</th><th>优先级</th></tr></thead><tbody><tr><td>direct</td><td>0</td></tr><tr><td>OSPF</td><td>10</td></tr><tr><td>IS-IS</td><td>15</td></tr><tr><td>Static</td><td>60</td></tr><tr><td>RIP</td><td>100</td></tr><tr><td>IBGP</td><td>130</td></tr><tr><td>OSPF ASE/import</td><td>150</td></tr><tr><td>EBGP</td><td>170</td></tr><tr><td>UNKNOWN</td><td>255</td></tr></tbody></table><p>可以看到华为设备的静态路由优先级是低于ospf与isis的（不算直连路由）</p><h3 id="实验设备"><a href="#实验设备" class="headerlink" title="实验设备"></a>实验设备</h3><p>实验中使用的设备：HUAWEI AR2220  &amp;  PC</p><h3 id="实验拓扑-amp-规划"><a href="#实验拓扑-amp-规划" class="headerlink" title="实验拓扑&amp;规划"></a>实验拓扑&amp;规划</h3><p><img src="https://oss.sadly.pw/images/R-S/2019-11-01/2019-11-01_11-16-52.jpg" alt=""></p><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>利用默认路由以及配置静态路由使PC1与PC2之间可以互通</p><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><ol><li><h4 id="给PC配置相应的IP"><a href="#给PC配置相应的IP" class="headerlink" title="给PC配置相应的IP"></a>给PC配置相应的IP</h4></li><li><h4 id="给R1，R2，R3配置对应接口IP（以R1为例）"><a href="#给R1，R2，R3配置对应接口IP（以R1为例）" class="headerlink" title="给R1，R2，R3配置对应接口IP（以R1为例）"></a>给R1，R2，R3配置对应接口IP（以R1为例）</h4></li></ol><p><strong>R1：</strong></p><pre><code>[R1]interface g 0/0/2 [R1-GigabitEthernet0/0/2]ip add 172.10.0.254 24[R1-GigabitEthernet0/0/2]q[R1]interface g 0/0/0[R1-GigabitEthernet0/0/0]ip add 10.1.1.1 30[R1-GigabitEthernet0/0/0]q[R1]q&lt;R1&gt;save</code></pre><p>现在我们去看路由表（以R1为例）,命令<code>display ip routing-table</code></p><pre><code>Routing Tables: Public         Destinations : 10       Routes : 10       Destination/Mask    Proto  Pre Cost Flags NextHop      Interface       10.1.1.0/30  Direct  0    0    D   10.1.1.1      GigabitEthernet 0/0/0       10.1.1.1/32  Direct  0    0    D   127.0.0.1     GigabitEthernet 0/0/0       10.1.1.3/32  Direct  0    0    D   127.0.0.1     GigabitEthernet 0/0/0      127.0.0.0/8   Direct  0    0    D   127.0.0.1     InLoopBack0      127.0.0.1/32  Direct  0    0    D   127.0.0.1     InLoopBack0127.255.255.255/32  Direct  0    0    D   127.0.0.1     InLoopBack0     172.10.0.0/24  Direct  0    0    D   172.10.0.254  GigabitEthernet 0/0/2   172.10.0.254/32  Direct  0    0    D   127.0.0.1     GigabitEthernet 0/0/2   172.10.0.255/32  Direct  0    0    D   127.0.0.1     GigabitEthernet 0/0/2255.255.255.255/32  Direct  0    0    D   127.0.0.1     InLoopBack0</code></pre><p>可以看到配置了IP的接口和所在网络都拥有了一条路由，这就是前面提到的直连路由，也就是默认路由</p><p>那么，想要实现我们的目标，可以分为两个流程来理解<br><img src="https://oss.sadly.pw/images/R-S/2019-11-01/2019-11-01_12-28-18.jpg" alt=""><br>所以，在R1,R2上配置前往PC2网段的路由，在R2,R3上配置前往PC1网段的路由，即可实现网络互通。</p><ol start="3"><li><h4 id="配置静态路由"><a href="#配置静态路由" class="headerlink" title="配置静态路由"></a>配置静态路由</h4></li></ol><p><strong>R1：</strong></p><pre><code>[R1]ip route-static 172.10.10.0 24 GigabitEthernet0/0/0 10.1.1.2[R1]q&lt;R1&gt;save</code></pre><p><img src="https://oss.sadly.pw/images/R-S/2019-11-01/2019-11-01_12-55-58.jpg" alt=""></p><p>查看R1路由表，多了一条这样的路由</p><pre><code>172.10.10.0/24  Static  60   0   D   10.1.1.2  GigabitEthernet 0/0/0</code></pre><p>可以看到优先级,下一跳，出接口等信息</p><p><strong>R2：</strong></p><pre><code>[R2]ip route-static 172.10.10.0 24 GigabitEthernet 0/0/2 10.1.1.6[R2]q&lt;R1&gt;save</code></pre><p><strong>R3：</strong></p><pre><code>[R3]ip route-static 172.10.0.0 24 GigabitEthernet 0/0/2 10.1.1.5[R3]q&lt;R1&gt;save</code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>接下来，由从<code>PC1</code>ping<code>PC2</code>检查网络是否相通<br><img src="https://oss.sadly.pw/images/R-S/2019-11-01/2019-11-01_13-21-40.jpg" alt=""></p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>PC1 与 PC2 互通</p><h2 id="浮动静态路由"><a href="#浮动静态路由" class="headerlink" title="浮动静态路由"></a>浮动静态路由</h2><p>静态路由优先级的一种使用方式，通过配置不同优先级的静态路由实现备用链路<br><em>Q:静态路由应该也可以通过和其他路由协议（ospf等）之间的优先级差距，实现备用链路吧？</em></p><h3 id="实验设备-1"><a href="#实验设备-1" class="headerlink" title="实验设备"></a>实验设备</h3><p>HUAWEI AR2220  &amp;  PC</p><h3 id="实验拓扑-amp-规划-1"><a href="#实验拓扑-amp-规划-1" class="headerlink" title="实验拓扑&amp;规划"></a>实验拓扑&amp;规划</h3><p><img src="https://oss.sadly.pw/images/R-S/2019-11-01/2019-11-01_13-38-05.jpg" alt=""></p><h3 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h3><p>配置不同优先级的静态路由实现当R2出现故障时，切换为前往R3的路由，保持网络通畅</p><h3 id="实验过程-1"><a href="#实验过程-1" class="headerlink" title="实验过程"></a>实验过程</h3><p>相对于上一个实验环境，只多了两条静态路由，所以，直接使用了上一个实验环境进行配置</p><p>增加连线，并配置接口ip</p><pre><code>[R1]interface GigabitEthernet 0/0/1[R1-GigabitEthernet0/0/1]ip add 10.1.1.9 30[R1-GigabitEthernet0/0/1]q[R1]q&lt;R1&gt;save</code></pre><p>​<br>当前的路由路径（<code>PC1</code>ping<code>PC2</code>）:</p><pre><code>PC&gt;tracert 172.10.10.1traceroute to 172.10.10.1, 8 hops max(ICMP), press Ctrl+C to stop 1  172.10.0.254   16 ms  15 ms  16 ms 2  10.1.1.2   16 ms  31 ms  15 ms 3  10.1.1.6   32 ms  31 ms  31 ms 4  172.10.10.1   31 ms  32 ms  31 ms</code></pre><h4 id="配置浮动静态路由（优先级不同的静态路由）"><a href="#配置浮动静态路由（优先级不同的静态路由）" class="headerlink" title="配置浮动静态路由（优先级不同的静态路由）"></a>配置浮动静态路由（优先级不同的静态路由）</h4><p><strong>R1：</strong></p><pre><code>[R1]ip route-static 172.10.10.0 24 GigabitEthernet 0/0/1 10.1.1.10 preference 100&lt;R1&gt;save</code></pre><p><img src="https://oss.sadly.pw/images/R-S/2019-11-01/2019-11-01_13-48-32.jpg" alt=""></p><p>优先级配置为100，低于之前配置的缺省值<code>60</code></p><p><em>此时使用<code>display ip routing-table</code>查看路由表，并没有看到这条路由，猜测是因为没有生效的原因</em></p><p><strong>R3：</strong></p><pre><code>[R3]ip route-static 172.10.0.0 24 GigabitEthernet 0/0/0 10.1.1.9 preference 100[R3]q&lt;R3&gt;save</code></pre><p><del>#### 验证&amp;排错</del><br><del>关闭R2</del><br><del>查看R1路由表，发现并没有之前配置的那条优先级为100的路由条目</del></p><p><del>去翻书，发现需要用这条命令去查<code>display ip routing-table protocol static</code></del></p><p><del>结果还是没有，可以看到已配置的路由数量是两条，但是Inactive部分并没有路由条目</del></p><p><del>把这条备用路由undo了，重新配置！</del></p><p><del>[R1]undo ip route-static 172.10.10.0 24 10.1.1.10 preference 100</del></p><p><del>再去用<code>display ip routing-table protocol static</code>看路由表</del></p><p><del>没有了</del><br>-<del>重新配置，查看路由表，还是没有！</del><br><del><em>猜测：书上使用的命令并没有配置出接口，我怀疑是这里的问题</em></del></p><p><del>重新配置，并且不指定出接口</del></p><p><del>[R1]ip route-static 172.10.10.0 24 10.1.1.10 preference 100</del><br><del>[R1]q</del><br><del><R1>save</del><br><del>R3同理，undo了原来的条目，重新配置</del></p><p><del>[R3]undo ip route-static 172.10.0.0 24 GigabitEthernet 0/0/0 10.1.1.9 preference100<br>~</del>[R3]ip route-static 172.10.0.0 24 10.1.1.9 preference 100~~<br>    <br /></p><p> <strong>加了新的物理连接要记得配IP！</strong><br> <strong>收获：当静态路由的出接口配在未配置IP的接口上时，不会显示在路由表上，这时候，就可以去检查接口IP是否有问题</strong></p><h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><ul><li>关闭R2的GE 0/0/0接口</li></ul><pre><code>[R2]interface GigabitEthernet 0/0/0[R2-GigabitEthernet0/0/0]shutdown</code></pre><ul><li><code>PC1</code>ping<code>pc2</code> 失败</li></ul><p>对R3的GE 0/0/0 0/0/1 0/0/2 同时进行抓包<br><img src="https://oss.sadly.pw/images/R-S/2019-11-01/2019-11-01_15-37-35.jpg" alt=""></p><p>可以看出来，PC1发出的包到达了PC2，PC2返回的包却被R3发往了优先级为60的R2，R2随之丢弃</p><ul><li>当我关闭R2设备时<br><img src="https://oss.sadly.pw/images/R-S/2019-11-01/2019-11-01_15-44-16.jpg" alt=""></li></ul><p>链路是成立的</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>通过条优先级相同，下一跳不同的静态路由实现负载均衡</p><h4 id="修改之前优先级为100的路由"><a href="#修改之前优先级为100的路由" class="headerlink" title="修改之前优先级为100的路由"></a>修改之前优先级为100的路由</h4><pre><code>[R1]ip route-static 172.10.10.0 24 GigabitEthernet 0/0/1 10.1.1.10 preference 60</code></pre><p><img src="https://oss.sadly.pw/images/R-S/2019-11-01/2019-11-01_16-02-15.jpg" alt="">    </p><p>完成</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>在配置静态路由时，需要注意整个链路的状态，通常源网络与目的网络中间的每一台设备都要配置对应指向的静态路由，就想接力一样。</strong></p><p>​    </p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;静态路由&quot;&gt;&lt;a href=&quot;#静态路由&quot; class=&quot;headerlink&quot; title=&quot;静态路由&quot;&gt;&lt;/a&gt;静态路由&lt;/h2&gt;&lt;p&gt;一种手动配置的路由方式，各厂商对静态路由的优先级处理不同。&lt;/p&gt;
&lt;h3 id=&quot;优先级&quot;&gt;&lt;a href=&quot;#优先级&quot; 
      
    
    </summary>
    
    
      <category term="路由交换" scheme="https://eeeje.com/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2/"/>
    
    
      <category term="课程" scheme="https://eeeje.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>linux中docker的使用笔记</title>
    <link href="https://eeeje.com/2019/10/31/docker/"/>
    <id>https://eeeje.com/2019/10/31/docker/</id>
    <published>2019-10-31T11:17:10.000Z</published>
    <updated>2019-11-18T11:16:12.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="容器部分"><a href="#容器部分" class="headerlink" title="容器部分"></a>容器部分</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口</p><p>我这里呢，因为之前搭建带hexo编译环境中的服务与我的nginx冲突，有因为我对linux中http服务的不了解，所以想到了把编译环境搭建在虚拟化容器中办法，阿里云服务器本就是虚拟机，docker则是一个-最佳方案-。最终我选择，宝塔和编译环境 都放入容器。</p><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><pre><code>docker run --name hexo-v2 -d -it -p 172.17.0.1:2121:22/tcp -p 4000:4000 hexo-v1</code></pre><p>–name：容器名字<br>hexo-v2：新建的容器名<br> -d ：后台运行<br> -it：交互模式运行并分配伪终端<br> -p：端口映射<br>hexo-v1：使用的镜像名字</p><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><pre><code>docker exec -it hexo-v2 bash</code></pre><h4 id="现有容器存为镜像"><a href="#现有容器存为镜像" class="headerlink" title="现有容器存为镜像"></a>现有容器存为镜像</h4><pre><code>docker commit 容器名称 镜像名称</code></pre><h4 id="docker镜像的导出和导入"><a href="#docker镜像的导出和导入" class="headerlink" title="docker镜像的导出和导入"></a>docker镜像的导出和导入</h4><p>显示当前docker中的镜像：</p><pre><code>docker images</code></pre><p>镜像列表如下：</p><pre><code>REPOSITORY            TAG                 IMAGE ID            CREATED             SIZEpointsift            latest              90b2ef439b40        2 weeks ago         12.6GBubuntu               18.04               735f80812f90        4 weeks ago         83.5MB</code></pre><p>导出镜像：</p><pre><code>docker save -o &lt;保存路径&gt; &lt;镜像名称:标签&gt;</code></pre><p>如把A机 ubuntu:18.04 导出到当前文件夹，则在A机上运行：</p><pre><code>docker save -o ./ubuntu18.tar ubuntu:18.04 </code></pre><p>此时，把A机当前文件夹下的ubuntu18.tar拷贝到另一台安装过docker的B机上，在B机上导入镜像：</p><pre><code>docker load --input ./ubuntu18.tar</code></pre><p>这样镜像ubuntu:18.04就成功的从A机复制到B机上了</p><h4 id="docker容器的导出与导入"><a href="#docker容器的导出与导入" class="headerlink" title="docker容器的导出与导入"></a>docker容器的导出与导入</h4><p>显示当前docker中运行的容器：</p><pre><code>docker ps</code></pre><p>运行的容器列表如下：</p><pre><code>CONTAINER ID        IMAGE               COMMAND             CREATED         STATUS              PORTS               NAMES4a02996e83b1        ubuntu:18.04        &quot;/bin/bash&quot;        44 secondsago    Up 42 seconds                           ubuntu18</code></pre><p>停止容器：</p><pre><code>docker stop &lt;容器名&gt;</code></pre><p>如要想要导出ubuntu18,必须先停止（如果ubuntu18没有运行，则不需要执行此步骤）：</p><pre><code>docker stop ubuntu18</code></pre><p>如果容器已经停止了，想要查看该容器，可以运行（该命令会显示所有的容器，包括运行的和非运行的）：</p><pre><code>docker ps -a</code></pre><p>导出容器：</p><pre><code>docker export &lt;容器名&gt; &gt; &lt;保存路径&gt;</code></pre><p>如导在A机中导出容器ubuntu18:</p><pre><code>docker export ubuntu18 &gt; ./ubuntu18.tar</code></pre><p>导入容器的命令：</p><pre><code>docker import &lt;文件路径&gt;  &lt;容器名&gt;</code></pre><p>把A机当前文件夹下的ubuntu18.tar文件拷贝到B机上，在B机上运行：</p><pre><code>docker import ./ubuntu18.tar ubuntu18</code></pre><p>启动容器：</p><pre><code>docker start &lt;容器名&gt;</code></pre><p>B机上就多了一个名为ubuntu18的容器，但导入的容器还处在未运行的状态，需要启动容器：</p><pre><code>docker start ubuntu18</code></pre><p>进入容器：</p><p>#同一个容器会有相同的界面，如果该容器之前已经运行过，则会直接进入运行容器的界面<br>#该命令通常用于进入后台已经在运行的容器</p><pre><code>docker attach &lt;容器名&gt; </code></pre><p>或者<br>#同一个容器有不同的界面，进入容器后的界面不会受该容器的其他运行者的影响<br>#一般情况下建议使用该命令</p><pre><code>docker exec -it &lt;容器名&gt; &lt;执行指令&gt; </code></pre><p>启动容器之后，需要进入容器，可以运行：</p><pre><code>docker exec -it ubuntu18 /bin/bash</code></pre><p>这个命令这样也可以</p><pre><code>docker exec -it ubuntu18 bash</code></pre><p>​    </p><h4 id="关于端口映射问题"><a href="#关于端口映射问题" class="headerlink" title="关于端口映射问题"></a>关于端口映射问题</h4><p>目前我发现的最优方案就是把现有容器存为镜像，删除原来的容器（不然会提醒端口被占用）重新建一个，并添加好端口映射</p><h2 id="容器开启ssh"><a href="#容器开启ssh" class="headerlink" title="容器开启ssh"></a>容器开启ssh</h2><h4 id="1、下载centos7的镜像"><a href="#1、下载centos7的镜像" class="headerlink" title="1、下载centos7的镜像"></a>1、下载centos7的镜像</h4><pre><code>docker pull centos</code></pre><h4 id="2、查看已有的镜像，将看到有个名为centos的镜像"><a href="#2、查看已有的镜像，将看到有个名为centos的镜像" class="headerlink" title="2、查看已有的镜像，将看到有个名为centos的镜像"></a>2、查看已有的镜像，将看到有个名为centos的镜像</h4><pre><code>docker images</code></pre><h4 id="3、基于centos镜像，创建一个名为test的容器"><a href="#3、基于centos镜像，创建一个名为test的容器" class="headerlink" title="3、基于centos镜像，创建一个名为test的容器"></a>3、基于centos镜像，创建一个名为test的容器</h4><p>docker run -it  –name  test  centos  /bin/bash</p><h4 id="4、进入容器后，升级并安装ssh服务端和客户端，服务端能让其他主机远程登录本机，客户端能让本机远程登录其他主机"><a href="#4、进入容器后，升级并安装ssh服务端和客户端，服务端能让其他主机远程登录本机，客户端能让本机远程登录其他主机" class="headerlink" title="4、进入容器后，升级并安装ssh服务端和客户端，服务端能让其他主机远程登录本机，客户端能让本机远程登录其他主机"></a>4、进入容器后，升级并安装ssh服务端和客户端，服务端能让其他主机远程登录本机，客户端能让本机远程登录其他主机</h4><pre><code>yum -y updateyum -y install passwd openssl openssh-server  openssh-clients</code></pre><h4 id="5、创建-var-run-sshd-目录，要不然sshd服务启动会报错"><a href="#5、创建-var-run-sshd-目录，要不然sshd服务启动会报错" class="headerlink" title="5、创建 /var/run/sshd/目录，要不然sshd服务启动会报错"></a>5、创建 /var/run/sshd/目录，要不然sshd服务启动会报错</h4><pre><code>mkdir  /var/run/sshd/</code></pre><h4 id="6、编辑sshd的配置文件-etc-ssh-sshd-config，将其中的UsePAM-yes改为UsePAM-no"><a href="#6、编辑sshd的配置文件-etc-ssh-sshd-config，将其中的UsePAM-yes改为UsePAM-no" class="headerlink" title="6、编辑sshd的配置文件/etc/ssh/sshd_config，将其中的UsePAM yes改为UsePAM no"></a>6、编辑sshd的配置文件/etc/ssh/sshd_config，将其中的UsePAM yes改为UsePAM no</h4><p>可以进入sshd_config文件中去修改，也可以使用命令：</p><pre><code>sed -i &quot;s/UsePAM.*/UsePAM no/g&quot; /etc/ssh/sshd_config</code></pre><h4 id="7、创建公私密钥，输入命令后，直接按两次enter键确认就行了"><a href="#7、创建公私密钥，输入命令后，直接按两次enter键确认就行了" class="headerlink" title="7、创建公私密钥，输入命令后，直接按两次enter键确认就行了"></a>7、创建公私密钥，输入命令后，直接按两次enter键确认就行了</h4><pre><code>ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_keyssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_keyssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key</code></pre><h4 id="8、完成上述几步后，可以开启ssh服务了"><a href="#8、完成上述几步后，可以开启ssh服务了" class="headerlink" title="8、完成上述几步后，可以开启ssh服务了"></a>8、完成上述几步后，可以开启ssh服务了</h4><pre><code>/usr/sbin/sshd -D &amp;</code></pre><p>此时使用命令ps -ef | grep sshd  便可以看到ssh已经开起来了</p><p>输入命令</p><pre><code>yum -y install lsoflsof -i:22          //如果在/etc/ssh/sshd_config文件中将端口22修改了，那么填写你修改了的端口</code></pre><h4 id="9、修改root密码"><a href="#9、修改root密码" class="headerlink" title="9、修改root密码"></a>9、修改root密码</h4><pre><code>passwd </code></pre><p>然后输入设置的密码</p><h4 id="10-测试完成"><a href="#10-测试完成" class="headerlink" title="10 测试完成"></a>10 测试完成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi  /etc/hosts  可以查看到容器的ip</span><br></pre></td></tr></table></figure><h4 id="11、配置ssh无密码登录"><a href="#11、配置ssh无密码登录" class="headerlink" title="11、配置ssh无密码登录"></a>11、配置ssh无密码登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">cd ~/.ssh</span><br><span class="line"></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p>输入完后，这时再输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure><p>发现并不用在输入命令了：）。</p><p>ssh无密码登录可用hadoop集群中master主节点无密码登录从节点。</p><h2 id="阿里云ssh欢迎语"><a href="#阿里云ssh欢迎语" class="headerlink" title="阿里云ssh欢迎语"></a>阿里云ssh欢迎语</h2><p>阿里云自带的欢迎语太丑了<br>于是自己找了找<br>路径在/etc/motd这个文件里<br>里面的内容改了就可以</p><p> <strong>日常懒得截图</strong><br>镜像/容器部分转载自：<a href="https://www.jianshu.com/p/4e862a2a2d03" target="_blank" rel="noopener">https://www.jianshu.com/p/4e862a2a2d03</a><br>SSH部分转载自：<a href="https://blog.csdn.net/u013140345/article/details/79777311" target="_blank" rel="noopener">https://blog.csdn.net/u013140345/article/details/79777311</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;容器部分&quot;&gt;&lt;a href=&quot;#容器部分&quot; class=&quot;headerlink&quot; title=&quot;容器部分&quot;&gt;&lt;/a&gt;容器部分&lt;/h2&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Lin
      
    
    </summary>
    
    
      <category term="运维" scheme="https://eeeje.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="linux" scheme="https://eeeje.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux中安装hexo编译博客</title>
    <link href="https://eeeje.com/2019/10/29/hexo/"/>
    <id>https://eeeje.com/2019/10/29/hexo/</id>
    <published>2019-10-28T17:41:10.000Z</published>
    <updated>2019-11-18T11:16:12.750Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>几天前就看到服务器要到期了，没去管他，结果给忘了，今天凌晨过期了，这台阿里云华东2（上海）的机器也用了快2年了，物理位置在上海让我这个强迫症很不舒服，而且40G的盘都用了30G了（反正就是给自己各种不嫌麻烦的借口），看到新出的学生机有可以购买在华东1（杭州）就果断释放了原来的服务器，新购于杭州节点<br><em>之前用宝塔做了备份策略，所以数据都储存在我的OSS里面</em><br><br /><br>前几天用hexo在github上发布了博客，但是只能在我自己的电脑上进行编译，有一些局限，所以先在这台服务器上安装hexo用来在云端编译博客。<br><br /><br>顺便发现了个BUG,阿里云学生机在认证期限内，好像可以不限次数的续费，我准备存点生活费续他个十年八年的试试。<br><em>废话不多说</em></p><h2 id="发布的时候发现博客园的Markdown预格式化文本真的很烦，有些代码直接显示文本了"><a href="#发布的时候发现博客园的Markdown预格式化文本真的很烦，有些代码直接显示文本了" class="headerlink" title="发布的时候发现博客园的Markdown预格式化文本真的很烦，有些代码直接显示文本了"></a>发布的时候发现博客园的Markdown预格式化文本真的很烦，有些代码直接显示文本了</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h4><p>管你cmd、xshell、hyper、putty还是什么的，连的上就完事</p><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p><em>这是个JavaScript运行环境</em></p><p>这一步建议在特定目录下操作</p><p>没有linux基础请跟我做</p><pre><code>mkdir /softmkdir /soft/hexocd /soft/hexo</code></pre><ul><li>从官网下载linux版本的node.js 或者直接采用wget方式下载</li></ul><p>这里使用wget下载</p><pre><code>wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz</code></pre><p>​    </p><ul><li>把他解压了</li></ul><pre><code>tar xf node-v10.9.0-linux-x64.tar.xz</code></pre><ul><li>解压以后测试是否安装成功</li></ul><p>移动到目录</p><pre><code>cd node-v10.9.0-linux-x64/</code></pre><p>执行命令</p><pre><code>./bin/node -v             // 如果出现版本号，说明安装成功</code></pre><p>修改node-v10.9.0-linux-x64文件夹名字为nodejs</p><pre><code>cd ..mv node-v10.9.0-linux-x64 nodejs</code></pre><ul><li>设置软连接</li></ul><pre><code>ln -s /soft/hexo/nodejs/bin/node /usr/local/bin/nodeln -s /soft/hexo/nodejs/bin/npm /usr/local/bin/npm</code></pre><h4 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h4><ul><li>安装依赖包</li></ul><pre><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-develyum install gcc perl-ExtUtils-MakeMaker</code></pre><p>通过命令 <code>git --version</code> 可以看到，Git 当前的版本号为 1.8.3.1，太过于陈旧，所以需要先把它移除了。</p><ul><li>卸载旧版本的 Git</li></ul><pre><code>yum remove git</code></pre><p>然后移动到/usr/local/</p><pre><code>cd /usr/local/</code></pre><ul><li>下载并解压</li></ul><pre><code>wget https://github.com/git/git/archive/v2.9.2.tar.gztar -zxvf  v2.9.2.tar.gz  // 解压mv git-2.9.2 git  //重命名</code></pre><ul><li>编译安装</li></ul><pre><code>cd git         // 进入文件夹make prefix=/usr/local/git all // 编译源码make prefix=/usr/local/git install // 安装至 /usr/local/git 路径</code></pre><p>编译时，由机器配置决定速度，请耐心等待。</p><ul><li>打开环境变量配置文件</li></ul><pre><code>vim /etc/profile</code></pre><p>在文件底部添加以下配置。</p><pre><code>PATH=$PATH:/usr/local/git/bin // git 的目录export PATH</code></pre><p><em>两个语句都要加上</em></p><p>刷新环境变量</p><pre><code>source /etc/profile</code></pre><p>最后再使用 <code>git --version</code> 查看版本号，已经为 2.9.2</p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><pre><code>npm install hexo-cli -g</code></pre><h4 id="搭建博客基础"><a href="#搭建博客基础" class="headerlink" title="搭建博客基础"></a>搭建博客基础</h4><ul><li>先把hexo命令添加到全局：hexo在nodejs的lib/node_modules/hexo-cli/bin 可以找到hexo命令方式是采用软连接</li></ul><pre><code>ln -s /soft/hexo/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</code></pre><ul><li>部署hexo博客环境：这个可以放在nodejs外面，方便打开<br>cd 到和nodejs一个目录下（我是放在根目录下的）然后:</li></ul><pre><code>mkdir hexocd hexo    hexo init //会自动把资源文件下载好</code></pre><p>解释一下<br>node_modules：是依赖包<br>public：存放的是生成的页面<br>scaffolds：命令生成文章等的模板<br>source：用命令创建的各种文章<br>themes：主题<br>_config.yml：整个博客的配置<br>db.json：source解析所得到的<br>package.json：项目所需模块项目的配置信息</p><ul><li>搭桥到github</li></ul><p>创建一个repo，名称为<code>yourname.github.io</code>, 其中yourname是github名称（我已经有了，就不截图了）</p><p>下面的每一步，要把yourname换为自己的github名字，youremail换为自己的github邮箱</p><p>配置github账户信息</p><pre><code>git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p>​<br>创建SSH</p><p>输入：<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code>，生成ssh</p><p>下面提示地方一路回车就可以</p><p>然后去找生成的sshkey</p><pre><code>cd ~/.sshcat id_rsa.pub</code></pre><p>把回显的那些字符复制出来</p><p>在github的setting中找到SSH and GPG keys，点击 New SSH key</p><p>title随便取，key就填刚刚那一段ssh</p><p>在gitbash中验证是否添加成功：<code>ssh -T git@github.com</code></p><ul><li>一步之遥</li></ul><p>用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)注意YourgithubName改为你的</p><pre><code>deploy:type: gitrepo: https://github.com/YourgithubName/YourgithubName.github.io.gitbranch: master</code></pre><p>这样子需要每次都输入密码，如果不想每次输入密码的话把<code>https://github.com/YourgithubName/YourgithubName.github.io.git</code>改为<code>git@github.com:YourgithubName/YourgithubName.github.io.git</code></p><p>回到gitbash中，进入你的blog目录，分别执行以下命令</p><pre><code>hexo cleanhexo server</code></pre><p>​    </p><ul><li>启动测试环境</li></ul><pre><code>hexo s</code></pre><p> 输入 <code>yourip:4000/</code>即可访问页面</p><p>如果是服务器，我的是阿里云服务器，需要配置安全组打开4000端口，这样就可以访问了<br>或者linux虚拟机，需要测试内外能否正常通信<br>每次编辑好都执行下面的命令进行上传</p><pre><code>hexo cleanhexo g       //编译hexo d       //上传</code></pre><br /><p><strong>这样，基本的hexo环境就搭建好了。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;几天前就看到服务器要到期了，没去管他，结果给忘了，今天凌晨过期了，这台阿里云华东2（上海）的机器也用了快2年了，物理位置在上海让我这个强迫症
      
    
    </summary>
    
    
      <category term="运维" scheme="https://eeeje.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="linux" scheme="https://eeeje.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>TCP/UDP</title>
    <link href="https://eeeje.com/2019/10/28/tcp/"/>
    <id>https://eeeje.com/2019/10/28/tcp/</id>
    <published>2019-10-28T11:41:10.000Z</published>
    <updated>2019-11-18T11:16:13.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="传输协议之-TCP-UDP"><a href="#传输协议之-TCP-UDP" class="headerlink" title="传输协议之-TCP/UDP"></a>传输协议之-TCP/UDP</h2><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>TCP <strong>可靠</strong> 面向连接-类似打电话/收到扣1  但是效率比较低<br>UDP <strong>不可靠的</strong> 面向无连接-类似群聊 效率高<br>eg：QQ传文件-TCP（保证文件完整），发消息-UDP</p><h4 id="数据包结构"><a href="#数据包结构" class="headerlink" title="数据包结构"></a>数据包结构</h4><p><img src="https://oss.sadly.pw/images/R-S/2019-10-28/baotou.jpg" alt=""></p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><h4 id="tcp三次握手"><a href="#tcp三次握手" class="headerlink" title="tcp三次握手"></a>tcp三次握手</h4><blockquote><p>甲：你是小王？<br>乙：是的，我是小王，你是老李吗？<br>甲：是的我是老李</p></blockquote><p>流程：<code>主机1</code>发送SYN<code>seq=0，ctl=SYN</code>（seq标记位，序列号） –&gt;<code>主机2</code>收到SYN，发送SYN及ACK（确认号：收到的序列号+1）<code>seq=0（序列号）,ack=1,ctl=SYN(同步位),ACK</code>–—&gt;<code>主机1</code>收到STN及ACK，Established<code>seq=1 ack=1 ctl=ACK</code><br><br /><br>抓包实例<br><img src="https://oss.sadly.pw/images/R-S/2019-10-28/woshou.jpg" alt=""></p><p><em>拓展：安全方向-SYN Flood（洪水）攻击是ddos的主要方式，通过僵尸网络发送大量的第一个SYN报文，并不回复第二个包。</em><br><br /></p><hr><h4 id="tcp会话确认"><a href="#tcp会话确认" class="headerlink" title="tcp会话确认"></a>tcp会话确认</h4><ul><li>所有的包都要确认，只有第一个包是没有确认号的</li><li>最终的确认号就是数据的大小<br><code>主机1</code> <code>seq=1 ack=1 |Data（9字节）</code>–&gt;<code>主机2</code> <code>seq=1 ack=10 |Data（20字节）</code>“ack=10理解为‘<em>你可以发送序列号为10的数据包了</em>’”–&gt;<code>主机1</code> <code>seq=10 ack=21 |Data（12字节）</code>–&gt;<code>主机2</code> <code>seq=21 ack=22 |Data（n字节）</code></li></ul><p><strong>确认号就是前一个包的序列号+数据</strong></p><ul><li>不是每一个包都会确认，<code>主机2</code>连续发包时<code>主机1</code>多个包回复一个确认。</li></ul><p><em>理解：乙给甲说了很多句话，甲回复乙，前几句话我都听到了，然后乙接着讲话。</em><br><br /><br>抓包实例（从阿里云oss下载文件）<br><img src="https://oss.sadly.pw/images/R-S/2019-10-28/quereng.jpg" alt=""><br><br /></p><hr><h4 id="tcp会话的拥塞和流量控制"><a href="#tcp会话的拥塞和流量控制" class="headerlink" title="tcp会话的拥塞和流量控制"></a>tcp会话的拥塞和流量控制</h4><blockquote><p>“你说太快了，慢点”<br>“你说太慢了，快点”</p></blockquote><p>每个数据包有个window字段 <code>win</code> 窗口大小决定了在收到确认前可以发送的字节数。<br><br /><br>抓包实例（下载文件）<br><img src="https://oss.sadly.pw/images/R-S/2019-10-28/huihua.jpg" alt=""><br>实际抓包过程中发现，服务器发过来的包要远超过主机确认包中的窗口大小。<br><br /><br><strong>Q：why？</strong><br><br /></p><hr><h4 id="tcp会话的终止-四次挥手"><a href="#tcp会话的终止-四次挥手" class="headerlink" title="tcp会话的终止-四次挥手"></a>tcp会话的终止-四次挥手</h4><blockquote><p>小王：我要挂了<br>老李：好的，再见<br>老李：我也挂了<br>小王：好的，再见</p></blockquote><p>终止位FIN，位于flages的最后一个字节<br>并不一定是所有的终止都有四次握手<br>比如我的多次尝试都没有抓到四次握手的终止会话<br><img src="https://oss.sadly.pw/images/R-S/2019-10-28/zhongzhi.jpg" alt=""><br>可以看到主机发出了带<code>FIN</code>的包，服务器确认了上一个包并带了<code>FIN</code>标识，主机确认了这个包后连接被关闭。<br /><br>另外，我在抓包时发现了另外一个现象：<br><img src="https://oss.sadly.pw/images/R-S/2019-10-28/chongchuan3.jpg" alt=""><br>可以看到服务器发出一个带有<code>FIN</code>标识的包后主机先返回了一个确认包，又连续的发出了一个带有<code>急迫</code>标识的包与一个带有<code>重置</code>标识的包，服务器返回了重置的包，连接重新建立。</p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p><strong>UDP是一种面向无连接的传输层协议，传输可靠性没有保证</strong><br>udp不提供重传记住，占用资源小，处理效率高<br><em>一些时延敏感的流量，如语音、视频、游戏等，通常使用udp作为传输层协议</em><br>eg：看视频卡顿，失真，玩游戏卡顿</p><h3 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h3><table><thead><tr><th>传输控制协议（TCP）</th><th>用户数据协议（UDP）</th></tr></thead><tbody><tr><td>面向连接</td><td>无连接</td></tr><tr><td>可靠传输</td><td>尽力而为的传输</td></tr><tr><td>支持流控及窗口机制</td><td>无流控及窗口机制</td></tr><tr><td>HTTP、FTP等</td><td>TFTP、DNS、DHCP等</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;传输协议之-TCP-UDP&quot;&gt;&lt;a href=&quot;#传输协议之-TCP-UDP&quot; class=&quot;headerlink&quot; title=&quot;传输协议之-TCP/UDP&quot;&gt;&lt;/a&gt;传输协议之-TCP/UDP&lt;/h2&gt;&lt;h3 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; cla
      
    
    </summary>
    
    
      <category term="路由交换" scheme="https://eeeje.com/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2/"/>
    
    
      <category term="学习" scheme="https://eeeje.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>1027笔记</title>
    <link href="https://eeeje.com/2019/10/27/1027/"/>
    <id>https://eeeje.com/2019/10/27/1027/</id>
    <published>2019-10-27T05:57:10.000Z</published>
    <updated>2019-11-18T11:16:12.361Z</updated>
    
    <content type="html"><![CDATA[<p><strong>路由器选路的方式依靠路由表</strong></p><p>路由器选路</p><blockquote><p>先匹配策略路由，如果没有再去查路由表<br>路由表里面一定存放的是<strong>最优</strong>的路由<br>路由表会最客观显示出当前的路由情况</p></blockquote><p><em>问题处理：名词查询，理解连接起来</em></p><h4 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h4><p>static rip ospf isis bgp等都是三层协议=路由协议<br>direct 直连路由<br>pre 优先级越小越优</p><blockquote><p>每家厂商的优先级都是不同的</p></blockquote><p>华为：</p><table><thead><tr><th>Direct</th><th>OSPF</th><th>Static</th><th>RIP</th></tr></thead><tbody><tr><td>0</td><td>10</td><td>60</td><td>100</td></tr></tbody></table><p>cost 拥挤程度 带宽 开销</p><blockquote><p>参考系很多<br><code>ospf</code>带宽·rip·跳数</p></blockquote><p>nexthop 下一跳<br>interface 出接口（对自己来言）<br>每条就是一个路由条目</p><hr><p>看OSPF</p><h4 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h4><p>出接口、下一跳都进行配置</p><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>Hcna实验指南<br>静态路由实验 拓扑截图<br>OSPF实验 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;路由器选路的方式依靠路由表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;路由器选路&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先匹配策略路由，如果没有再去查路由表&lt;br&gt;路由表里面一定存放的是&lt;strong&gt;最优&lt;/strong&gt;的路由&lt;br&gt;路由表会最客观显示出当前的路
      
    
    </summary>
    
    
      <category term="路由交换" scheme="https://eeeje.com/categories/%E8%B7%AF%E7%94%B1%E4%BA%A4%E6%8D%A2/"/>
    
    
      <category term="课程" scheme="https://eeeje.com/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录下京东备件库购物经历</title>
    <link href="https://eeeje.com/2019/10/23/shopping/"/>
    <id>https://eeeje.com/2019/10/23/shopping/</id>
    <published>2019-10-23T14:48:10.000Z</published>
    <updated>2019-11-18T11:16:12.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我的第一篇正式博客"><a href="#我的第一篇正式博客" class="headerlink" title="我的第一篇正式博客"></a>我的第一篇正式博客</h3><h3 id="记录一次京东备件库购物经历"><a href="#记录一次京东备件库购物经历" class="headerlink" title="记录一次京东备件库购物经历"></a>记录一次京东备件库购物经历</h3><p><em>博客基于hexo编写，托管于Github，图片使用阿里oss托管</em><br><br /><br>前几天偶尔在<abbr title="什么值得买">张大妈</abbr>看到很多备件库晒单帖子，好多人买到了合自己心意价格又划算的东西，就很好奇的去看了看备件库（京东搜索备件库）接着就有了这个购物经历</p><h4 id="先介绍下京东备件库"><a href="#先介绍下京东备件库" class="headerlink" title="先介绍下京东备件库"></a>先介绍下京东备件库</h4><p>这是京东的官方介绍<br><img src="https://oss.sadly.pw/images/shopping/1.jpg" alt=""><br><img src="https://oss.sadly.pw/images/shopping/2.jpg" alt=""><br><img src="https://oss.sadly.pw/images/shopping/3.jpg" alt=""><br><img src="https://oss.sadly.pw/images/shopping/4.jpg" alt=""><br><img src="https://oss.sadly.pw/images/shopping/5.jpg" alt=""></p><h4 id="首先来讲渠道"><a href="#首先来讲渠道" class="headerlink" title="首先来讲渠道"></a>首先来讲渠道</h4><p>从来源上来讲，备件库的商品是来自自营店，那么产品从渠道上来讲是没有问题的，虽然说官方给了好几个来源，但是我觉得最主要的途径是来自于“7天无理由退换货”的政策</p><h4 id="其次说成色"><a href="#其次说成色" class="headerlink" title="其次说成色"></a>其次说成色</h4><p>官方给出了3个标准，分别是<code>99新</code> <code>9成新</code> <code>7成新</code>  备件库一般都会做完检测评完级再进行入库，<code>99新</code>和<code>9成新</code>一般都是未拆封/拆封未使用/轻度使用的东西，我主要说一下<code>7成新</code> ，<code>7成新</code>最引人注意的是价格足够便宜，而从成色来讲，可以分为三种<code>产品较差</code>  <code>包装较差</code> <code>产品,包装都差</code> 于是乎，在备件库“7天无理由退货”的蛊惑下，我买了两款<code>七成新</code>的外设。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>我买的两款外设分别是<strong>罗技 G903双模游戏鼠标</strong>和<strong>雷蛇 雷霆齿鲸V2 USB版</strong></p><h3 id="罗技-G903"><a href="#罗技-G903" class="headerlink" title="罗技 G903"></a>罗技 G903</h3><p><em>新品售价799元，入手366元</em></p><blockquote><p>这款鼠标真的是眼馋了很久，奈何799的价格让我望而却步</p></blockquote><p><strong>包装</strong><br><img src="https://oss.sadly.pw/images/shopping/6.jpg" alt=""></p><blockquote><p>备件库专用的白色大标签，其实我看到包装的时候是比较慌的，包装还行，中规中矩，产品会不会成色不行</p></blockquote><p><strong>正面</strong><br><img src="https://oss.sadly.pw/images/shopping/7.jpg" alt=""></p><blockquote><p>这是我用了两天拍的照片，正面没有任何问题，中间有一点灰尘，吹一吹就掉了</p></blockquote><p><strong>背面</strong><br><img src="https://oss.sadly.pw/images/shopping/8.jpg" alt=""></p><blockquote><p>看来被评为<code>7成新</code>的原因就在这里了，滑片那里明显可以看到许多划痕，基本可以确定上一个使用者是在没有鼠标垫的场景下进行使用的</p></blockquote><br /><p><strong>总体来说，以366的几个买到这样的一只鼠标还是很划算的，因为我用的大鼠标垫，下面的划痕基本对我使用没有造成影响，下载了驱动，测试了一番后美滋滋的用起来了（无级滚轮是真的爽）。关于G903的使用等可以去看其他外设博主的测评，这里就不进行阐述了</strong></p><h3 id="雷蛇-雷霆齿鲸V2-USB版"><a href="#雷蛇-雷霆齿鲸V2-USB版" class="headerlink" title="雷蛇 雷霆齿鲸V2 USB版"></a>雷蛇 雷霆齿鲸V2 USB版</h3><p><em>新品售价469元 到手150元</em></p><blockquote><p>买耳机的原因呢，是因为寝室有一位室友，玩游戏时特别的“<strong>兴奋</strong>”，简单形容一下：<strong>.</strong>，刚好我又报了<strong>HCIE</strong>的网络课程，所以我迫切的需要一支头戴式耳机，让我可以在寝室里活下去。</p></blockquote><p><strong>包装</strong><br><img src="https://oss.sadly.pw/images/shopping/9.jpg" alt=""></p><blockquote><p>耳机的包装拿到手后让人害怕，塑料变形，宽胶带粘起来的盒子</p></blockquote><p><strong>产品</strong><br><img src="https://oss.sadly.pw/images/shopping/10.jpg" alt=""></p><blockquote><p>拿出耳机后发现，竟然是新的！（心里开了花），检查了下外观，没有任何使用痕迹，接着就是<code>二手头戴耳机成色检测法</code>： <strong>闻</strong>，因为耳机经过长时间使用后，头部区域因为出汗或者洗发水的缘故，或多或少的会有一些味道留在上面，这时候就可以通过味道的深浅确定使用的时间长短，嗯~是清新的塑料味，等等？塑料味？hhhhh运气正好，撸到了准全新，看来这就是我前面提到的<code>包装较差</code></p></blockquote><p><strong>细节</strong><br><img src="https://oss.sadly.pw/images/shopping/11.jpg" alt=""><br><img src="https://oss.sadly.pw/images/shopping/12.jpg" alt=""><br><br /><br><strong>150块买到这样一款准全新耳机真的是赚到了，40mm钕磁铁驱动单元、可拆卸麦克风，终于可以适量的减轻耳朵的压力了</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>如果你不介意二手的话，相对于咸鱼来路不是很清晰的东西，京东备件库也是一个不错的选择，99新和9成新基本可以考虑入手，价格相对来说还算美丽，就算不满意也有“七天无理由退货”的政策让你反悔，至于7成新，刚需的朋友可以尝试一下，毕竟价格太诱人，也有“7天”政策做保障，最后留一句：备件库看看就好了，千万别去夺宝岛拍东西，被人称作“夺命岛”是有原因的。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;我的第一篇正式博客&quot;&gt;&lt;a href=&quot;#我的第一篇正式博客&quot; class=&quot;headerlink&quot; title=&quot;我的第一篇正式博客&quot;&gt;&lt;/a&gt;我的第一篇正式博客&lt;/h3&gt;&lt;h3 id=&quot;记录一次京东备件库购物经历&quot;&gt;&lt;a href=&quot;#记录一次京东备件库购物经
      
    
    </summary>
    
    
      <category term="购物" scheme="https://eeeje.com/categories/%E8%B4%AD%E7%89%A9/"/>
    
    
      <category term="购物" scheme="https://eeeje.com/tags/%E8%B4%AD%E7%89%A9/"/>
    
  </entry>
  
</feed>
